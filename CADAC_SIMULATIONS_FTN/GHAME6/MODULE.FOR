C**********************************************************************
C******************** MODULES AND DUMMY FOR GHAME6 ********************
C**********************************************************************
C*** *
C*** * Calling sequence of Modules:
C*** *   G2   ENVIRONMENT
C*** *   G3   KINEMATICS
C*** *   A1   AERODYNAMICS
C*** *   A2   PROPULSION
C*** *   A3   FORCES
C*** *   S4   INS
C*** *   C2   AUTOPILOT
C*** *   C4   ACTUATOR
C*** *   D2   EULER
C*** *   D1   NEWTON
C*** *
C*** * MODIFICATION HISTORY
C*** * 000413 Version 1,0 Created by Peter Zipfel
C*** *
C**********************************************************************
C**********************************************************************
      SUBROUTINE A1I
C**********************************************************************
C*** * The initialization module for the Aerodynamic Module A1.
C*** * Reserved C(3510) locations are 1200-1299
C*** * Ref: "Handbook of Intelligent Control", Chapter 11 "Flight
C*** *       Propulsion, and Thermal Control of Advanced Aircraft and
C*** *       Hypersonic Vehicles", Edited by D.A.White and D.A. Sofge,
C*** *       Van Nostrand Reinhold,New York, NY, 1992
C*** *
C*** * This module performs the following functions:
C*** * (1) Provides the aerodynamic tables of hypersonic vehicle GHAME
C*** *     Ref Area REFA= 557.42 m^2
C*** *     Ref Lengths REFB= 24.38m, REFC= 22.86 m
C*** *     Moment coefficients referenced to fixed c.g.
C*** * (2) Defines the run stopping conditions
C*** *
C*** * MODIFICATION HISTORY
C*** * 990603 Created by Peter Zipfel
C*** *
C*** ******************************************************************
C
      COMMON C(3510)
C
      COMMON /AERO/TBLCL0(117),TBLCLA(117),TBLCLDE(117),TBLCD0(117)
     &,TBLCDA(117),TBLCM0(117),TBLCMA(117),TBLCMDE(117),TBLCMQ(117)
     &,TBLCYB(117),TBLCYDA(117),TBLCYDR(117),TBLCLLB(117),TBLCLLDA(117)
     &,TBLCLNDA(117),TBLCLNDR(117),TBLCLNP(117),TBLCLNR(117)
     &,TBLCLLDR(117),TBLCLLP(117),TBLCLLR(117),TBLCLNB(117)
     &,ALPHAXI(9),VMACHI(13)
C
C*** INPUT DATA
C
	EQUIVALENCE (C(1282),TRCVEL)
      EQUIVALENCE (C(1283),TRMACH)
      EQUIVALENCE (C(1284),TRDYNM)
      EQUIVALENCE (C(1285),TRLOAD)
      EQUIVALENCE (C(1286),TRALP)
      EQUIVALENCE (C(1287),TRTHT)
      EQUIVALENCE (C(1289),TRTHTD)
      EQUIVALENCE (C(1290),TRPHID)
      EQUIVALENCE (C(1291),TRATE)
C
C TRCVEL = D Minimum closing speed - m/s
C TRMACH = D Minimum Mach number
C TRDYNM = D Minimum dynamic pressure - Pa
C TRLOAD = D Minimum load capacity - g's
C TRALP = D Maximum total angle of attack - rad
C TRTHT = D Maximum pitch gimbal angle - rad
C TRTHTD = D Maximum pitch gimbal rate - rad/s
C TRPHID = D Maximum roll gimbal rate - rad/s
C TRATE = D Maximum tracking rate - rad/s
C
C*** INITIALIZATIONS OF A1 PARAMETERS
C
	EQUIVALENCE (C(1201),IX1)
	EQUIVALENCE (C(1202),IX2)
	EQUIVALENCE (C(1203),IXM2)
      EQUIVALENCE (C(1204),REFA)
      EQUIVALENCE (C(1205),REFB)
      EQUIVALENCE (C(1206),REFC)
C
C IX1 = I Initialize table pointer to 1 - ND
C IX2 = I Initialize table pointer to 1 - ND
C IXM2 = I Initialize table pointer to 1 - ND
C REFA = I Reference area for aero coefficients - m^2
C REFB = I Reference length wingspan - m
C REFC = I Reference length mean aerodynamic cord - m
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1280),TRCODE)
      EQUIVALENCE (C(1281),TMCODE)
C
C TRCODE = I Termination code number
C TMCODE = I Dummy variable initialized to zero
C
C  MACH (13 columns) .4 .6 .8 .9 .95 1.05 1.2 1.5 2. 3. 6. 12. 24.
C  AOA(9 rows )(deg): -3. 0. 3. 6. 9. 12. 15. 18. 21. (second variable)
C
      DATA VMACHI/.4,.6,.8,.9,.95,1.05,1.2,1.5,2.,3.,6.,12.,24./
      DATA ALPHAXI/-3.,0.,3.,6.,9.,12.,15.,18.,21./
C
C*** Aero tables based on NASA's GHAME model
C
	DATA TBLCL0 /
     1 0.04508, 0.05491, 0.04723, 0.06222, 0.06411, 0.07569, 0.06492,
     2 0.04782, 0.03480, 0.01583,-0.00175,-0.00547,-0.00468,
     1-0.03575,-0.03810,-0.04375,-0.03800,-0.03800,-0.03150,-0.03675,
     2-0.03905,-0.02965,-0.02475,-0.02075,-0.01871,-0.01562,
     1-0.11693,-0.11690,-0.13532,-0.13317,-0.14505,-0.13861,-0.14068,
     2-0.12433,-0.09539,-0.06776,-0.04593,-0.03483,-0.02893,
     1-0.22054,-0.21782,-0.23228,-0.22108,-0.25401,-0.23254,-0.25132,
     2-0.21391,-0.16617,-0.11392,-0.07910,-0.05409,-0.04481,
     1-0.32599,-0.32773,-0.33138,-0.30955,-0.34726,-0.35937,-0.36570,
     2-0.31249,-0.24995,-0.17259,-0.12465,-0.08445,-0.06985,
     1-0.41960,-0.43704,-0.43095,-0.43224,-0.44946,-0.49158,-0.42414,
     2-0.41519,-0.34693,-0.24957,-0.18941,-0.14139,-0.11688,
     1-0.56105,-0.58493,-0.53773,-0.53748,-0.52428,-0.52394,-0.53246,
     2-0.48735,-0.42815,-0.32392,-0.26223,-0.21567,-0.17836,
     1-0.72859,-0.68972,-0.61593,-0.60137,-0.52399,-0.54559,-0.64640,
     2-0.53332,-0.49102,-0.38885,-0.34431,-0.30273,-0.25036,
     1-0.92320,-0.80347,-0.69635,-0.65836,-0.50020,-0.54335,-0.77975,
     2-0.56663,-0.54949,-0.45683,-0.43640,-0.40437,-0.33438/
      DATA TBLCLA /
     1 0.05483, 0.05972, 0.06170, 0.06832, 0.07085, 0.07335, 0.07145,
     2 0.05858, 0.04392, 0.02805, 0.01379, 0.00956, 0.00794,
     1 0.05472, 0.05805, 0.06173, 0.06613, 0.07078, 0.07272, 0.06948,
     2 0.05817, 0.04417, 0.02854, 0.01513, 0.01012, 0.00840,
     1 0.05460, 0.05638, 0.06177, 0.06395, 0.07072, 0.07208, 0.06752,
     2 0.05775, 0.04442, 0.02904, 0.01647, 0.01068, 0.00886,
     1 0.05827, 0.05833, 0.06255, 0.06275, 0.07170, 0.06993, 0.06987,
     2 0.05830, 0.04527, 0.02967, 0.01815, 0.01139, 0.00946,
     1 0.06087, 0.06170, 0.06328, 0.06192, 0.07006, 0.07203, 0.07093,
     2 0.05973, 0.04720, 0.03138, 0.02038, 0.01297, 0.01076,
     1 0.06092, 0.06287, 0.06370, 0.06452, 0.06976, 0.07470, 0.06717,
     2 0.06097, 0.04957, 0.03409, 0.02342, 0.01630, 0.01350,
     1 0.06440, 0.06678, 0.06455, 0.06533, 0.06792, 0.06927, 0.06722,
     2 0.05978, 0.05017, 0.03582, 0.02613, 0.01986, 0.01645,
     1 0.06872, 0.06725, 0.06368, 0.06343, 0.06215, 0.06448, 0.06847,
     2 0.05725, 0.04950, 0.03651, 0.02863, 0.02319, 0.01921,
     1 0.07303, 0.06772, 0.06282, 0.06153, 0.05638, 0.05970, 0.06972,
     2 0.05472, 0.04882, 0.03720, 0.03112, 0.02652, 0.02197/
      DATA TBLCLDE /
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019,
     1 0.00055, 0.00055, 0.00061, 0.00069, 0.00053, 0.00050, 0.00036,
     2 0.00037, 0.00031, 0.00021, 0.00021, 0.00019, 0.00019/
      DATA TBLCD0 /
     1 0.02941, 0.03035, 0.03127, 0.03633, 0.04871, 0.06964, 0.07106,
     2 0.07076, 0.06228, 0.04472, 0.02961, 0.02122, 0.01766,
     1 0.03594, 0.03714, 0.04141, 0.04936, 0.06265, 0.08447, 0.08354,
     2 0.08047, 0.07067, 0.05161, 0.03553, 0.02584, 0.02150,
     1 0.03261, 0.03394, 0.03647, 0.04104, 0.05359, 0.07359, 0.07468,
     2 0.07486, 0.06681, 0.04947, 0.03502, 0.02583, 0.02150,
     1 0.01436, 0.01489, 0.01049, 0.01345, 0.02174, 0.04174, 0.04369,
     2 0.05006, 0.04731, 0.03597, 0.02594, 0.02021, 0.01685,
     1-0.02306,-0.02386,-0.04433,-0.03845,-0.04007,-0.02090,-0.01598,
     2 0.00010, 0.00808, 0.00925, 0.00672, 0.00797, 0.00672,
     1-0.08415,-0.09375,-0.13162,-0.13204,-0.14179,-0.12953,-0.09461,
     2-0.07789,-0.05773,-0.03957,-0.02957,-0.01836,-0.01507,
     1-0.18718,-0.23091,-0.25573,-0.25708,-0.26424,-0.25284,-0.23458,
     2-0.17409,-0.14190,-0.10402,-0.07789,-0.05742,-0.04744,
     1-0.31882,-0.40962,-0.38482,-0.39617,-0.40820,-0.42320,-0.38219,
     2-0.31589,-0.26256,-0.19187,-0.14391,-0.11319,-0.09366,
     1-0.47897,-0.62884,-0.54072,-0.56164,-0.57770,-0.62233,-0.56587,
     2-0.48309,-0.40512,-0.29579,-0.22221,-0.17988,-0.14894/
      DATA TBLCDA /
     1-0.00323,-0.00348,-0.00507,-0.00646,-0.00677,-0.00716,-0.00588,
     2-0.00475,-0.00419,-0.00356,-0.00319,-0.00256,-0.00213,
     1-0.00107,-0.00120,-0.00173,-0.00157,-0.00163,-0.00132,-0.00121,
     2-0.00137,-0.00151,-0.00158,-0.00180,-0.00153,-0.00128,
     1 0.00110, 0.00109, 0.00160, 0.00331, 0.00352, 0.00453, 0.00347,
     2 0.00201, 0.00117, 0.00040,-0.00041,-0.00051,-0.00043,
     1 0.00415, 0.00425, 0.00595, 0.00764, 0.00858, 0.00939, 0.00838,
     2 0.00607, 0.00448, 0.00281, 0.00139, 0.00068, 0.00056,
     1 0.00794, 0.00820, 0.01150, 0.01248, 0.01444, 0.01514, 0.01402,
     2 0.01100, 0.00841, 0.00554, 0.00347, 0.00204, 0.00169,
     1 0.01227, 0.01323, 0.01769, 0.01907, 0.02153, 0.02275, 0.01922,
     2 0.01645, 0.01309, 0.00908, 0.00619, 0.00407, 0.00336,
     1 0.01816, 0.02137, 0.02453, 0.02588, 0.02791, 0.02910, 0.02683,
     2 0.02150, 0.01766, 0.01269, 0.00896, 0.00640, 0.00529,
     1 0.02424, 0.02993, 0.02995, 0.03170, 0.03380, 0.03633, 0.03326,
     2 0.02777, 0.02305, 0.01663, 0.01197, 0.00904, 0.00749,
     1 0.03033, 0.03849, 0.03537, 0.03752, 0.03969, 0.04357, 0.03969,
     2 0.03404, 0.02844, 0.02057, 0.01498, 0.01169, 0.00968/
      DATA TBLCM0 /
     1-0.00332,-0.00379,-0.00383,-0.00449,-0.00411,-0.00457,-0.00403,
     2-0.00403,-0.00364,-0.00331,-0.00312,-0.00275,-0.00254,
     1 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
     2 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
     1 0.00187, 0.00216, 0.00263, 0.00270, 0.00322, 0.00304, 0.00347,
     2 0.00310, 0.00335, 0.00292, 0.00300, 0.00267, 0.00254,
     1 0.00245, 0.00288, 0.00360, 0.00375, 0.00468, 0.00457, 0.00545,
     2 0.00512, 0.00571, 0.00526, 0.00546, 0.00507, 0.00493,
     1 0.00221, 0.00298, 0.00398, 0.00454, 0.00565, 0.00599, 0.00670,
     2 0.00699, 0.00691, 0.00734, 0.00686, 0.00721, 0.00706,
     1 0.00182, 0.00308, 0.00502, 0.00562, 0.00760, 0.00785, 0.00857,
     2 0.00912, 0.00809, 0.00932, 0.00783, 0.00895, 0.00869,
     1 0.00315, 0.00463, 0.00702, 0.00757, 0.01008, 0.01001, 0.01087,
     2 0.01121, 0.00970, 0.01121, 0.00915, 0.01075, 0.01051,
     1 0.01029, 0.01030, 0.01232, 0.01080, 0.01408, 0.01182, 0.01396,
     2 0.01241, 0.01193, 0.01229, 0.01078, 0.01203, 0.01195,
     1 0.00149, 0.00406, 0.00873, 0.00846, 0.01373, 0.01117, 0.01555,
     2 0.01229, 0.01501, 0.01280, 0.01409, 0.01349, 0.01395/
      DATA TBLCMA /
     1-0.00127,-0.00145,-0.00146,-0.00171,-0.00157,-0.00174,-0.00154,
     2-0.00154,-0.00139,-0.00126,-0.00119,-0.00105,-0.00097,
     1-0.00100,-0.00120,-0.00125,-0.00152,-0.00142,-0.00162,-0.00145,
     2-0.00148,-0.00135,-0.00124,-0.00117,-0.00105,-0.00097,
     1-0.00071,-0.00082,-0.00100,-0.00103,-0.00123,-0.00116,-0.00132,
     2-0.00118,-0.00128,-0.00111,-0.00114,-0.00102,-0.00097,
     1-0.00047,-0.00055,-0.00069,-0.00071,-0.00089,-0.00087,-0.00104,
     2-0.00097,-0.00109,-0.00100,-0.00104,-0.00097,-0.00094,
     1-0.00028,-0.00038,-0.00050,-0.00058,-0.00072,-0.00076,-0.00085,
     2-0.00089,-0.00088,-0.00093,-0.00087,-0.00092,-0.00090,
     1-0.00017,-0.00029,-0.00048,-0.00054,-0.00072,-0.00075,-0.00082,
     2-0.00087,-0.00077,-0.00089,-0.00075,-0.00085,-0.00083,
     1-0.00024,-0.00035,-0.00054,-0.00058,-0.00077,-0.00076,-0.00083,
     2-0.00085,-0.00074,-0.00085,-0.00070,-0.00082,-0.00080,
     1-0.00065,-0.00065,-0.00078,-0.00069,-0.00089,-0.00075,-0.00089,
     2-0.00079,-0.00076,-0.00078,-0.00068,-0.00076,-0.00076,
     1-0.00008,-0.00022,-0.00048,-0.00046,-0.00075,-0.00061,-0.00085,
     2-0.00067,-0.00082,-0.00070,-0.00077,-0.00073,-0.00076/
      DATA TBLCMDE /
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00015,-0.00014,-0.00014,
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00015,-0.00014,-0.00014,
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00015,-0.00014,-0.00014,
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00014,-0.00014,-0.00014,
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00014,-0.00013,-0.00013,
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00013,-0.00012,-0.00012,
     1-0.00019,-0.00020,-0.00021,-0.00023,-0.00017,-0.00014,-0.00014,
     2-0.00016,-0.00013,-0.00009,-0.00012,-0.00012,-0.00012,
     1-0.00018,-0.00019,-0.00020,-0.00022,-0.00016,-0.00013,-0.00012,
     2-0.00015,-0.00012,-0.00008,-0.00012,-0.00011,-0.00011,
     1-0.00017,-0.00017,-0.00018,-0.00020,-0.00014,-0.00012,-0.00011,
     2-0.00013,-0.00011,-0.00007,-0.00012,-0.00011,-0.00011/
      DATA TBLCMQ /
     1-2.71900,-2.74800,-3.00000,-3.60000,-3.50300,-3.25100,-3.05000,
     2-3.20000,-2.40000,-1.80000,-1.60000,-0.27800,-0.27800,
     1-2.73700,-2.82400,-3.02500,-3.55400,-3.58100,-3.27700,-3.07600,
     2-3.10000,-2.40000,-1.80000,-1.60000,-0.65300,-0.65300,
     1-2.76900,-2.79800,-3.05100,-3.80600,-4.46600,-3.50500,-3.05100,
     2-3.10000,-2.40000,-1.80000,-1.60000,-0.87600,-0.87600,
     1-2.76400,-2.82300,-3.22700,-4.33600,-5.39600,-3.68100,-3.12500,
     2-3.10000,-2.40000,-1.80000,-1.60000,-0.99800,-0.99800,
     1-2.71100,-2.79800,-3.50300,-4.56500,-4.15700,-3.30300,-3.90700,
     2-3.10000,-2.40000,-1.70000,-1.60000,-1.12200,-1.12200,
     1-2.93800,-2.57200,-3.63000,-4.08400,-2.87400,-2.16700,-3.83200,
     2-3.20000,-2.40000,-1.70000,-1.60000,-1.34500,-1.34500,
     1-1.71700,-1.94100,-3.05100,-3.20200,-2.09300,-1.23500,-1.48800,
     2-3.00000,-2.20000,-1.70000,-1.60000,-1.72200,-1.72200,
     1-1.20300,-1.26100,-2.52100,-2.77300,-1.71400,-0.95700,-1.00800,
     2-1.20000,-1.90000,-1.80000,-1.60000,-1.99300,-1.99300,
     1-1.04100,-1.18500,-2.34400,-3.00000,-1.84100,-1.58800,-1.23500,
     2-1.00000,-1.70000,-1.80000,-1.60000,-2.26700,-2.26700/
      DATA TBLCYB /
     1-0.01868,-0.01815,-0.01870,-0.02040,-0.01946,-0.01667,-0.01785,
     2-0.01782,-0.01938,-0.00895,-0.00601,-0.00562,-0.00562,
     1-0.01866,-0.01790,-0.01870,-0.02020,-0.01850,-0.01700,-0.01715,
     2-0.01654,-0.01638,-0.00792,-0.00552,-0.00515,-0.00515,
     1-0.01844,-0.01790,-0.01865,-0.01995,-0.01800,-0.01675,-0.01645,
     2-0.01584,-0.01563,-0.00757,-0.00527,-0.00477,-0.00477,
     1-0.01822,-0.01790,-0.01860,-0.01970,-0.01750,-0.01650,-0.01575,
     2-0.01515,-0.01488,-0.00723,-0.00503,-0.00440,-0.00440,
     1-0.01810,-0.01790,-0.01870,-0.01935,-0.01750,-0.01630,-0.01525,
     2-0.01475,-0.01446,-0.00691,-0.00488,-0.00430,-0.00430,
     1-0.01799,-0.01790,-0.01880,-0.01900,-0.01750,-0.01610,-0.01475,
     2-0.01435,-0.01405,-0.00659,-0.00473,-0.00420,-0.00420,
     1-0.01760,-0.01790,-0.01885,-0.01810,-0.01620,-0.01600,-0.01470,
     2-0.01429,-0.01358,-0.00641,-0.00465,-0.00410,-0.00410,
     1-0.01697,-0.01805,-0.01890,-0.01720,-0.01490,-0.01590,-0.01465,
     2-0.01423,-0.01311,-0.00623,-0.00414,-0.00400,-0.00400,
     1-0.01697,-0.01820,-0.01825,-0.01560,-0.01317,-0.01532,-0.01469,
     2-0.01333,-0.01231,-0.00592,-0.00403,-0.00338,-0.00338/
      DATA TBLCYDA /
     1-0.00320,-0.00321,-0.00428,-0.00510,-0.00400,-0.00214,-0.00155,
     2-0.00060,-0.00003, 0.00011,-0.00011,-0.00013,-0.00013,
     1-0.00330,-0.00333,-0.00415,-0.00500,-0.00400,-0.00203,-0.00110,
     2-0.00054, 0.00000, 0.00015,-0.00008,-0.00009,-0.00009,
     1-0.00355,-0.00354,-0.00403,-0.00445,-0.00370,-0.00203,-0.00105,
     2-0.00046, 0.00009, 0.00021,-0.00004,-0.00005,-0.00005,
     1-0.00380,-0.00375,-0.00390,-0.00390,-0.00340,-0.00202,-0.00100,
     2-0.00038, 0.00018, 0.00026, 0.00001,-0.00001,-0.00001,
     1-0.00390,-0.00387,-0.00385,-0.00323,-0.00230,-0.00180,-0.00112,
     2-0.00027, 0.00025, 0.00032, 0.00006, 0.00002, 0.00002,
     1-0.00400,-0.00400,-0.00380,-0.00255,-0.00120,-0.00158,-0.00125,
     2-0.00015, 0.00031, 0.00038, 0.00010, 0.00006, 0.00006,
     1-0.00406,-0.00403,-0.00357,-0.00215,-0.00075,-0.00149,-0.00119,
     2-0.00015, 0.00034, 0.00041, 0.00013, 0.00008, 0.00008,
     1-0.00412,-0.00405,-0.00335,-0.00175,-0.00030,-0.00140,-0.00113,
     2-0.00015, 0.00037, 0.00045, 0.00015, 0.00010, 0.00010,
     1-0.00416,-0.00410,-0.00314,-0.00215,-0.00062,-0.00134,-0.00104,
     2-0.00015, 0.00039, 0.00047, 0.00017, 0.00012, 0.00011/
      DATA TBLCYDR /
     1 0.00305, 0.00275, 0.00210, 0.00082, 0.00044, 0.00180, 0.00165,
     2 0.00121, 0.00090, 0.00065, 0.00040, 0.00028, 0.00028,
     1 0.00300, 0.00270, 0.00205, 0.00085, 0.00045, 0.00170, 0.00160,
     2 0.00120, 0.00090, 0.00062, 0.00038, 0.00026, 0.00026,
     1 0.00295, 0.00268, 0.00203, 0.00090, 0.00050, 0.00166, 0.00155,
     2 0.00116, 0.00087, 0.00059, 0.00035, 0.00023, 0.00023,
     1 0.00290, 0.00265, 0.00200, 0.00095, 0.00055, 0.00162, 0.00150,
     2 0.00112, 0.00084, 0.00056, 0.00032, 0.00020, 0.00020,
     1 0.00283, 0.00261, 0.00199, 0.00105, 0.00062, 0.00156, 0.00145,
     2 0.00107, 0.00079, 0.00054, 0.00030, 0.00018, 0.00018,
     1 0.00275, 0.00258, 0.00198, 0.00115, 0.00070, 0.00150, 0.00140,
     2 0.00102, 0.00075, 0.00052, 0.00028, 0.00016, 0.00016,
     1 0.00268, 0.00256, 0.00198, 0.00120, 0.00066, 0.00146, 0.00136,
     2 0.00099, 0.00072, 0.00049, 0.00025, 0.00014, 0.00014,
     1 0.00262, 0.00255, 0.00198, 0.00125, 0.00063, 0.00142, 0.00132,
     2 0.00095, 0.00070, 0.00046, 0.00022, 0.00013, 0.00013,
     1 0.00261, 0.00253, 0.00199, 0.00118, 0.00056, 0.00138, 0.00132,
     2 0.00092, 0.00072, 0.00044, 0.00020, 0.00010, 0.00010/
      DATA TBLCLLB /
     1-0.00128,-0.00143,-0.00156,-0.00065,-0.00145,-0.00160,-0.00242,
     2-0.00190,-0.00139,-0.00050,-0.00003, 0.00003, 0.00003,
     1-0.00121,-0.00125,-0.00129,-0.00057,-0.00115,-0.00142,-0.00195,
     2-0.00158,-0.00122,-0.00038,-0.00002, 0.00004, 0.00004,
     1-0.00112,-0.00102,-0.00093,-0.00049,-0.00072,-0.00122,-0.00149,
     2-0.00119,-0.00096,-0.00023,-0.00003, 0.00002, 0.00002,
     1-0.00103,-0.00080,-0.00057,-0.00041,-0.00028,-0.00102,-0.00102,
     2-0.00080,-0.00070,-0.00009,-0.00003, 0.00000, 0.00000,
     1-0.00098,-0.00063,-0.00015,-0.00020, 0.00024,-0.00083,-0.00055,
     2-0.00046,-0.00059, 0.00002,-0.00002, 0.00002, 0.00002,
     1-0.00094,-0.00047, 0.00027, 0.00001, 0.00077,-0.00065,-0.00008,
     2-0.00012,-0.00048, 0.00014, 0.00000, 0.00004, 0.00004,
     1-0.00057, 0.00002, 0.00073, 0.00022, 0.00106,-0.00041, 0.00059,
     2 0.00032,-0.00038, 0.00022, 0.00001, 0.00005, 0.00005,
     1-0.00022, 0.00051, 0.00117, 0.00042, 0.00136,-0.00018, 0.00126,
     2 0.00077,-0.00028, 0.00031, 0.00001, 0.00006, 0.00006,
     1 0.00006, 0.00079, 0.00155, 0.00055, 0.00164, 0.00006, 0.00191,
     2 0.00119,-0.00012, 0.00045, 0.00003, 0.00011, 0.00011/
      DATA TBLCLLDA /
     1 0.00227, 0.00242, 0.00250, 0.00231, 0.00195, 0.00183, 0.00145,
     2 0.00092, 0.00068, 0.00026, 0.00015, 0.00016, 0.00016,
     1 0.00231, 0.00240, 0.00245, 0.00207, 0.00195, 0.00182, 0.00145,
     2 0.00092, 0.00068, 0.00027, 0.00015, 0.00016, 0.00016,
     1 0.00235, 0.00246, 0.00255, 0.00174, 0.00194, 0.00176, 0.00138,
     2 0.00092, 0.00068, 0.00029, 0.00017, 0.00018, 0.00018,
     1 0.00240, 0.00251, 0.00265, 0.00142, 0.00192, 0.00170, 0.00132,
     2 0.00092, 0.00068, 0.00031, 0.00019, 0.00020, 0.00020,
     1 0.00246, 0.00253, 0.00242, 0.00151, 0.00176, 0.00162, 0.00138,
     2 0.00092, 0.00069, 0.00034, 0.00022, 0.00023, 0.00023,
     1 0.00253, 0.00256, 0.00219, 0.00160, 0.00160, 0.00154, 0.00144,
     2 0.00092, 0.00070, 0.00037, 0.00026, 0.00026, 0.00026,
     1 0.00256, 0.00259, 0.00217, 0.00176, 0.00163, 0.00155, 0.00142,
     2 0.00092, 0.00072, 0.00041, 0.00030, 0.00030, 0.00030,
     1 0.00259, 0.00262, 0.00215, 0.00191, 0.00165, 0.00156, 0.00140,
     2 0.00092, 0.00074, 0.00046, 0.00035, 0.00034, 0.00034,
     1 0.00260, 0.00260, 0.00213, 0.00200, 0.00172, 0.00156, 0.00138,
     2 0.00092, 0.00077, 0.00051, 0.00040, 0.00040, 0.00040/
      DATA TBLCLLDR /
     1 0.00051, 0.00051, 0.00041, 0.00007, 0.00005, 0.00032, 0.00030,
     2 0.00024, 0.00020, 0.00016, 0.00011, 0.00007, 0.00007,
     1 0.00051, 0.00051, 0.00039, 0.00007, 0.00005, 0.00030, 0.00029,
     2 0.00023, 0.00018, 0.00015, 0.00010, 0.00007, 0.00007,
     1 0.00050, 0.00050, 0.00038, 0.00011, 0.00006, 0.00029, 0.00028,
     2 0.00022, 0.00017, 0.00014, 0.00009, 0.00006, 0.00006,
     1 0.00049, 0.00049, 0.00037, 0.00014, 0.00008, 0.00027, 0.00027,
     2 0.00021, 0.00016, 0.00013, 0.00007, 0.00005, 0.00005,
     1 0.00048, 0.00048, 0.00036, 0.00018, 0.00009, 0.00026, 0.00026,
     2 0.00020, 0.00015, 0.00013, 0.00007, 0.00004, 0.00004,
     1 0.00046, 0.00046, 0.00035, 0.00022, 0.00010, 0.00024, 0.00024,
     2 0.00020, 0.00014, 0.00012, 0.00007, 0.00004, 0.00004,
     1 0.00045, 0.00045, 0.00035, 0.00023, 0.00009, 0.00022, 0.00024,
     2 0.00019, 0.00013, 0.00011, 0.00006, 0.00003, 0.00003,
     1 0.00045, 0.00044, 0.00035, 0.00024, 0.00008, 0.00020, 0.00023,
     2 0.00018, 0.00013, 0.00010, 0.00005, 0.00002, 0.00002,
     1 0.00043, 0.00043, 0.00035, 0.00022, 0.00007, 0.00020, 0.00023,
     2 0.00018, 0.00012, 0.00009, 0.00005, 0.00002, 0.00002/
      DATA TBLCLLP /
     1-0.09435,-0.09435,-0.11066,-0.10971,-0.11446,-0.12126,-0.12795,
     2-0.12312,-0.10678,-0.08322,-0.05890,-0.04347,-0.04347,
     1-0.10059,-0.10059,-0.11301,-0.11305,-0.11400,-0.12168,-0.12551,
     2-0.12350,-0.10640,-0.08170,-0.06080,-0.04199,-0.04199,
     1-0.10651,-0.10488,-0.10488,-0.09819,-0.10526,-0.11058,-0.12016,
     2-0.11476,-0.10678,-0.08208,-0.06118,-0.04332,-0.04332,
     1-0.11054,-0.10727,-0.10450,-0.08717,-0.07950,-0.08797,-0.11290,
     2-0.10640,-0.10450,-0.08170,-0.06270,-0.04469,-0.04469,
     1-0.11712,-0.10872,-0.09994,-0.08189,-0.08478,-0.09416,-0.11047,
     2-0.10564,-0.09804,-0.08094,-0.06384,-0.04750,-0.04750,
     1-0.12118,-0.11495,-0.09196,-0.08911,-0.09196,-0.09937,-0.10895,
     2-0.10640,-0.09386,-0.08132,-0.06612,-0.05221,-0.05221,
     1-0.12627,-0.12118,-0.10108,-0.09819,-0.09625,-0.10169,-0.11126,
     2-0.11628,-0.09234,-0.08284,-0.06840,-0.05453,-0.05453,
     1-0.13076,-0.13076,-0.11111,-0.10537,-0.09964,-0.10401,-0.12221,
     2-0.12274,-0.09196,-0.08512,-0.07182,-0.05590,-0.05590,
     1-0.13642,-0.13315,-0.11734,-0.10587,-0.10108,-0.10442,-0.12168,
     2-0.12198,-0.09424,-0.08664,-0.07410,-0.05533,-0.05533/
      DATA TBLCLLR /
     1 0.04636, 0.04750, 0.04750, 0.04598, 0.04560, 0.04408, 0.04028,
     2 0.03230, 0.02470, 0.01672, 0.01026, 0.00950, 0.00950,
     1 0.05272, 0.05348, 0.05311, 0.05139, 0.05092, 0.04930, 0.04541,
     2 0.03724, 0.02802, 0.01786, 0.01121, 0.01045, 0.01045,
     1 0.05909, 0.05947, 0.05871, 0.05681, 0.05624, 0.05453, 0.05054,
     2 0.04218, 0.03135, 0.01900, 0.01216, 0.01140, 0.01140,
     1 0.06545, 0.06545, 0.06431, 0.06222, 0.06156, 0.05976, 0.05567,
     2 0.04712, 0.03467, 0.02014, 0.01311, 0.01235, 0.01235,
     1 0.07182, 0.07144, 0.06992, 0.06764, 0.06688, 0.06498, 0.06080,
     2 0.05206, 0.03800, 0.02128, 0.01406, 0.01330, 0.01330,
     1 0.07571, 0.07496, 0.07267, 0.07021, 0.06906, 0.06688, 0.06270,
     2 0.05377, 0.03971, 0.02214, 0.01453, 0.01397, 0.01397,
     1 0.07961, 0.07847, 0.07543, 0.07277, 0.07125, 0.06878, 0.06460,
     2 0.05548, 0.04142, 0.02299, 0.01501, 0.01463, 0.01463,
     1 0.08350, 0.08198, 0.07818, 0.07534, 0.07344, 0.07068, 0.06650,
     2 0.05719, 0.04313, 0.02385, 0.01548, 0.01529, 0.01529,
     1 0.08740, 0.08550, 0.08094, 0.07790, 0.07562, 0.07258, 0.06840,
     2 0.05890, 0.04484, 0.02470, 0.01596, 0.01596, 0.01596/
      DATA TBLCLNB /
     1 0.00839, 0.00811, 0.00820, 0.00788, 0.00701, 0.00893, 0.00741,
     2 0.00762, 0.00716, 0.00531, 0.00351, 0.00258, 0.00258,
     1 0.00745, 0.00719, 0.00717, 0.00713, 0.00647, 0.00754, 0.00713,
     2 0.00694, 0.00658, 0.00535, 0.00378, 0.00279, 0.00279,
     1 0.00648, 0.00623, 0.00608, 0.00629, 0.00595, 0.00613, 0.00687,
     2 0.00617, 0.00594, 0.00529, 0.00387, 0.00287, 0.00287,
     1 0.00553, 0.00528, 0.00500, 0.00546, 0.00542, 0.00473, 0.00661,
     2 0.00540, 0.00531, 0.00523, 0.00398, 0.00296, 0.00296,
     1 0.00460, 0.00433, 0.00384, 0.00446, 0.00457, 0.00350, 0.00657,
     2 0.00482, 0.00480, 0.00523, 0.00405, 0.00303, 0.00303,
     1 0.00367, 0.00338, 0.00268, 0.00347, 0.00371, 0.00227, 0.00653,
     2 0.00424, 0.00428, 0.00523, 0.00413, 0.00311, 0.00311,
     1 0.00271, 0.00237, 0.00140, 0.00250, 0.00285, 0.00101, 0.00643,
     2 0.00354, 0.00365, 0.00521, 0.00420, 0.00317, 0.00317,
     1 0.00175, 0.00137, 0.00011, 0.00153, 0.00200,-0.00024, 0.00632,
     2 0.00282, 0.00302, 0.00519, 0.00427, 0.00323, 0.00323,
     1-0.00010, 0.00048,-0.00123,-0.00013, 0.00070,-0.00246, 0.00571,
     2 0.00192, 0.00231, 0.00514, 0.00435, 0.00332, 0.00332/
      DATA TBLCLNDA /
     1 0.00043, 0.00056, 0.00079, 0.00107, 0.00101, 0.00038, 0.00047,
     2 0.00014,-0.00004, 0.00002, 0.00001, 0.00000, 0.00000,
     1 0.00046, 0.00060, 0.00079, 0.00107, 0.00100, 0.00036, 0.00034,
     2 0.00011,-0.00005,-0.00001, 0.00000, 0.00000, 0.00000,
     1 0.00050, 0.00063, 0.00080, 0.00094, 0.00095, 0.00035, 0.00020,
     2 0.00007,-0.00007,-0.00003,-0.00001,-0.00001,-0.00001,
     1 0.00055, 0.00066, 0.00081, 0.00081, 0.00090, 0.00034, 0.00007,
     2 0.00002,-0.00009,-0.00005,-0.00002,-0.00002,-0.00002,
     1 0.00059, 0.00069, 0.00071, 0.00073, 0.00064, 0.00034, 0.00010,
     2 0.00000,-0.00011,-0.00007,-0.00004,-0.00004,-0.00004,
     1 0.00063, 0.00072, 0.00062, 0.00065, 0.00039, 0.00034, 0.00013,
     2-0.00003,-0.00013,-0.00009,-0.00005,-0.00005,-0.00005,
     1 0.00066, 0.00070, 0.00062, 0.00046, 0.00026, 0.00024, 0.00010,
     2-0.00005,-0.00015,-0.00010,-0.00007,-0.00006,-0.00006,
     1 0.00069, 0.00068, 0.00063, 0.00027, 0.00012, 0.00014, 0.00007,
     2-0.00008,-0.00016,-0.00011,-0.00008,-0.00007,-0.00007,
     1 0.00071, 0.00066, 0.00060, 0.00033, 0.00013, 0.00012, 0.00003,
     2-0.00010,-0.00018,-0.00012,-0.00009,-0.00007,-0.00007/
      DATA TBLCLNDR /
     1-0.00093,-0.00084,-0.00057,-0.00008,-0.00012,-0.00062,-0.00053,
     2-0.00038,-0.00027,-0.00021,-0.00015,-0.00011,-0.00011,
     1-0.00092,-0.00082,-0.00057,-0.00010,-0.00012,-0.00057,-0.00052,
     2-0.00037,-0.00026,-0.00021,-0.00014,-0.00010,-0.00010,
     1-0.00090,-0.00079,-0.00057,-0.00017,-0.00014,-0.00054,-0.00050,
     2-0.00036,-0.00026,-0.00020,-0.00013,-0.00009,-0.00009,
     1-0.00088,-0.00076,-0.00056,-0.00023,-0.00015,-0.00050,-0.00048,
     2-0.00035,-0.00025,-0.00020,-0.00012,-0.00007,-0.00007,
     1-0.00085,-0.00074,-0.00056,-0.00029,-0.00018,-0.00047,-0.00045,
     2-0.00034,-0.00024,-0.00019,-0.00011,-0.00006,-0.00006,
     1-0.00083,-0.00073,-0.00055,-0.00034,-0.00020,-0.00044,-0.00043,
     2-0.00033,-0.00023,-0.00018,-0.00010,-0.00005,-0.00005,
     1-0.00082,-0.00072,-0.00054,-0.00034,-0.00019,-0.00043,-0.00042,
     2-0.00032,-0.00022,-0.00017,-0.00009,-0.00005,-0.00005,
     1-0.00081,-0.00071,-0.00052,-0.00033,-0.00018,-0.00041,-0.00041,
     2-0.00030,-0.00021,-0.00016,-0.00008,-0.00004,-0.00004,
     1-0.00080,-0.00072,-0.00051,-0.00030,-0.00016,-0.00040,-0.00041,
     2-0.00030,-0.00019,-0.00015,-0.00007,-0.00004,-0.00004/
      DATA TBLCLNP /
     1 0.02242, 0.01311, 0.01862,-0.00342,-0.00304, 0.01824, 0.01520,
     2 0.03363, 0.04446, 0.02413, 0.04351, 0.01710, 0.01710,
     1 0.01064, 0.01254, 0.01900, 0.00000,-0.00418, 0.00494, 0.00380,
     2 0.02660, 0.03800, 0.02052, 0.03344, 0.01140, 0.01140,
     1-0.00114, 0.01197, 0.01938, 0.00342,-0.00532,-0.00836,-0.00760,
     2 0.01957, 0.03154, 0.01691, 0.02337, 0.00570, 0.00570,
     1-0.01292, 0.01140, 0.01976, 0.00684,-0.00646,-0.02166,-0.01900,
     2 0.01254, 0.02508, 0.01330, 0.01330, 0.00000, 0.00000,
     1-0.00114, 0.01045, 0.01273,-0.00418,-0.02223,-0.03173,-0.00038,
     2 0.01577, 0.02071, 0.01197, 0.00665,-0.00570,-0.00570,
     1 0.01064, 0.00950, 0.00570,-0.01520,-0.03800,-0.04180, 0.01824,
     2 0.01900, 0.01634, 0.01064, 0.00000,-0.01140,-0.01140,
     1 0.02622, 0.01995, 0.00095,-0.02280,-0.04750,-0.05605,-0.00988,
     2 0.01102, 0.01197, 0.00969,-0.01710,-0.01520,-0.01520,
     1 0.04180, 0.03040,-0.00380,-0.03040,-0.05700,-0.07030,-0.03800,
     2 0.00304, 0.00760, 0.00874,-0.03420,-0.01900,-0.01900,
     1 0.05738, 0.04085,-0.00855,-0.03800,-0.06650,-0.08455,-0.06612,
     2-0.00494, 0.00323, 0.00779,-0.05130,-0.02280,-0.02280/
      DATA TBLCLNR /
     1-0.10564,-0.10032,-0.10792,-0.11172,-0.11362,-0.13452,-0.16302,
     2-0.17480,-0.15960,-0.12160,-0.08170,-0.12730,-0.12730,
     1-0.10754,-0.10108,-0.10868,-0.10868,-0.12008,-0.13718,-0.15846,
     2-0.17480,-0.15960,-0.12236,-0.08246,-0.13566,-0.13566,
     1-0.12996,-0.10906,-0.11172,-0.10602,-0.13832,-0.14782,-0.19570,
     2-0.18240,-0.16150,-0.12540,-0.08360,-0.14022,-0.14022,
     1-0.10108,-0.09918,-0.12008,-0.14516,-0.15466,-0.17176,-0.20634,
     2-0.18240,-0.16150,-0.12920,-0.08550,-0.11058,-0.11058,
     1-0.10716,-0.09880,-0.12692,-0.16682,-0.15542,-0.17670,-0.19988,
     2-0.15960,-0.16530,-0.14060,-0.08930,-0.08284,-0.08284,
     1-0.11020,-0.12008,-0.12958,-0.13756,-0.14516,-0.17024,-0.26372,
     2-0.15960,-0.17480,-0.15390,-0.09880,-0.07790,-0.07790,
     1-0.11438,-0.12312,-0.14022,-0.32528,-0.24700,-0.18278,-0.21356,
     2-0.15200,-0.18620,-0.17290,-0.11400,-0.08740,-0.08740,
     1-0.11134,-0.12768,-0.16226,-0.18696,-0.20596,-0.25270,-0.32528,
     2-0.14440,-0.20140,-0.19836,-0.13110,-0.10602,-0.10602,
     1-0.11172,-0.14402,-0.20140,-0.24320,-0.26220,-0.39102,-0.40052,
     2-0.14440,-0.22420,-0.23180,-0.15390,-0.09918,-0.09918/
C
C*** VEHICLE REFERENCE VALUES (METRIC UNITS)
C
      REFA=557.42
      REFB=24.38
      REFC=22.86
C
C*** INITIALIZATION OF TABLE LOOK-UP POINTERS
C
	IX1=1
	IX2=1
	IXM2=1
C
C*** INITIALIZE AERODYNAMIC DERIVATIVES FOR AUTOPILOT
C
C99      CALL G2
C99      CALL A2I
C99      CALL A1
C
C*** RUN TERMINATION CRITERIA
C
C    IF ANY OF THE TERMINATION LIMITS IS VIOLATED A NUMBER CODE IS
C    STORED IN TRCOND(1772). IF MSTOP(1750)=1 THE SIMULATION WILL STOP.
C    IF MSTOP=0 (DEFAULT) THE SIMULATION WILL CONTINUE, AND ADDITIONAL
C    CODE NUMBERS, IF ANY, WILL ENTER ON THE LEFT OF TRCOND UNTIL THE
C    RUN IS STOPPED BY OTHER MEANS.
C
C       CODE  TERM.COND. MODULE DESCRIPTION
C         2     TRMACH     G2    MINIMUM MACH NUMBER
C         3     TRDYNM     G2    MINIMUM DYNAMIC PRESSURE - PA
C         4     TRLOAD     A1    MINIMUM LOAD FACTOR - G'S
C         5     TRALP      G3    MAXIMUM TOTAL INCIDENCE ANGLE - RAD
C
C99      TRMACH=.8
C99      TRDYNM=10.E+3
C99      TRLOAD=3.
      TRALP=1.
C
      TRCODE=0.
      TMCODE=0.
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE A1
C**********************************************************************
C***  * Aerodynamic Module
C*** * Reserved C(3510) locations are 1200-1299
C*** * Ref: "Handbook of Intelligent Control", Chapter 11 "Flight
C*** *       Propulsion, and Thermal Control of Advanced Aircraft and
C*** *       Hypersonic Vehicles", Edited by D.A.White and D.A. Sofge,
C*** *       Van Nostrand Reinhold,New York, NY, 1992
C***  *
C***  * This module performs the following functions:
C***  * (1) Calculates aerodynamic coefficients from look-up tables.
C***  * (2) Converts them into body axes
C***  *
C***  * MODIFICATION HISTORY
C***  * 990603 Created by Peter Zipfel
C***  *
C***  *****************************************************************
C
      COMMON C(3510)
C
      COMMON /AERO/TBLCL0(117),TBLCLA(117),TBLCLDE(117),TBLCD0(117)
     &,TBLCDA(117),TBLCM0(117),TBLCMA(117),TBLCMDE(117),TBLCMQ(117)
     &,TBLCYB(117),TBLCYDA(117),TBLCYDR(117),TBLCLLB(117),TBLCLLDA(117)
     &,TBLCLNDA(117),TBLCLNDR(117),TBLCLNP(117),TBLCLNR(117)
     &,TBLCLLDR(117),TBLCLLP(117),TBLCLLR(117),TBLCLNB(117)
     &,ALPHAXI(9),VMACHI(13)
C
	DIMENSION WBEB(3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1265),ALPLIMX)
C
C ALPLIMX = D Maximum alpha permissible - deg
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(2000),T)
C
C*** FROM INITIALIZATION MODULE
C
	EQUIVALENCE (C(1201),IX1)
	EQUIVALENCE (C(1202),IX2)
	EQUIVALENCE (C(1203),IXM2)
      EQUIVALENCE (C(1204),REFA)
      EQUIVALENCE (C(1205),REFB)
      EQUIVALENCE (C(1206),REFC)
      EQUIVALENCE (C(1280),TRCODE)
      EQUIVALENCE (C(1285),TRLOAD)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0054),AGRAV)
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(0221),VMACH)
      EQUIVALENCE (C(0344),ALPHAX)
      EQUIVALENCE (C(0345),BETAX)
      EQUIVALENCE (C(0906),ANLIMPX)
      EQUIVALENCE (C(0907),ANLIMNX)
      EQUIVALENCE (C(1119),DELAX)
      EQUIVALENCE (C(1120),DELEX)
      EQUIVALENCE (C(1121),DELRX)
      EQUIVALENCE (C(1309),VMASS)
      EQUIVALENCE (C(1604),DVBE)
      EQUIVALENCE (C(1713),WBEB(1))
C
C PDYNMC= O Dynamic pressure - Pa
C VMACH= O Vehicle Mach number based on DVBA
C ALPHAX= G Angle of attack - deg
C BETAX= G Side slip angle - deg
C ANLIMPX= D Positive structural acceleration limiter - g's
C ANLIMNX= D Neg. structural accel limiter (data is positive) - g'
C DELAX= O Aileron deflection - deg
C DELEX= O Elevator deflection - deg
C DELRX= O Rudder deflection - deg
C VMASS= O Vehicle mass - kg
C DVBE= D/G Geographic speed - m/s
C WBEB= I/G Geographic body rates - rad/s
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1220),CX)
      EQUIVALENCE (C(1221),CY)
      EQUIVALENCE (C(1222),CZ)
      EQUIVALENCE (C(1223),CLL)
      EQUIVALENCE (C(1224),CLM)
      EQUIVALENCE (C(1225),CLN)
      EQUIVALENCE (C(1267),GMAX)
C
C CX = O Body x-force coefficient - ND
C CY = O Side force coefficient - ND
C CZ = O Body z-force coefficient - ND
C CLL = O Rolling moment coefficient
C CLM = O Pitching moment coefficient
C CLN = O Yawing moment coefficient
C GMAX = G Max maneuverability limited by ALPLIMX and ANLIMPX- g's
C
C*** DIAGNOSTICS
C
	EQUIVALENCE (C(1259),CL)
	EQUIVALENCE (C(1260),CD)
	EQUIVALENCE (C(1261),CLOVERCD)
      EQUIVALENCE (C(1266),GAVAIL)
C
C CL = G Lift coeffiecient - ND
C CD = G Drag coefficient - ND
C CLOVERCD = G Lift/Drag ratio - ND
C GAVAIL = G Maneuver headroom - g's
C
	PARAMETER(MX1=13,MX2=9)
C
C*** Body rates for aerodynamic damping
C
	PP=WBEB(1)
	QQ=WBEB(2)
	RR=WBEB(3)
C
C*** Lift coefficient
C
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCL0
     &,CL0,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLA
     &,CLA,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLDE
     &,CLDE,DUM1,DUM2)
C
	CL=CL0+CLA*ALPHAX+CLDE*DELEX
C
C*** Drag coefficient
C
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCD0
     &,CD0,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCDA
     &,CDA,DUM1,DUM2)
C
	CD=CD0+CDA*ALPHAX
	CLOVERCD=CL/CD
C
C*** Side force coefficient
C
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCYB
     &,CYB,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCYDA
     &,CYDA,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCYDR
     &,CYDR,DUM1,DUM2)	
C
	CY=CYB*BETAX+CYDA*DELAX+CYDR*DELRX
C
C*** Rolling moment coefficient
C
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLLB
     &,CLLB,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLLDA
     &,CLLDA,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLLDR
     &,CLLDR,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLLP
     &,CLLP,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLLR
     &,CLLR,DUM1,DUM2)
C
	CLL=CLLB*BETAX+CLLDA*DELAX+CLLDR*DELRX+CLLP*PP*REFB/(2.*DVBE)
     &+CLLR*RR*REFB/(2.*DVBE)	
C
C*** Pitching moment coefficient
C
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCM0
     &,CM0,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCMA
     &,CMA,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCMDE
     &,CMDE,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCMQ
     &,CMQ,DUM1,DUM2)
C
	CLM=CM0+CMA*ALPHAX+CMDE*DELEX+CMQ*QQ*REFC/(2.*DVBE)	
C
C*** Yawing moment coefficient
C
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLNB
     &,CLNB,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLNDA
     &,CLNDA,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLNDR
     &,CLNDR,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLNP
     &,CLNP,DUM1,DUM2)
      CALL TBLP2(VMACH,ALPHAX,IX1,IX2,VMACHI,ALPHAXI,MX1,MX2,TBLCLNR
     &,CLNR,DUM1,DUM2)
C
	CLN=CLNB*BETAX+CLNDA*DELAX+CLNDR*DELRX+CLNP*PP*REFB/(2.*DVBE)
     &+CLNR*RR*REFB/(2.*DVBE)	
C
C*** Force coefficients in body axes (small beta assumption)
C
	COSA=COS(ALPHAX/CRAD)
	SINA=SIN(ALPHAX/CRAD)
	CX=-CD*COSA+CL*SINA
	CZ=-CD*SINA-CL*COSA
C
C*** Dimensional derivative calculations for autopilot
C
      CALL A1DER(CLA,CLDE,CMA,CMQ,CMDE,CYB,CYDR,CLNB,CLNR,CLNDR,CLLP
     &,CLLDA)
C
C*** Calculate load factor available for max alpha
C	
      CALL TBLP2(VMACH,ALPLIMX,IX1,IXM2,VMACHI,ALPHAXI,MX1,MX2,TBLCL0
     &,CL0MAX,DUM1,DUM2)	
      CALL TBLP2(VMACH,ALPLIMX,IX1,IXM2,VMACHI,ALPHAXI,MX1,MX2,TBLCLA
     &,CLAMAX,DUM1,DUM2)
	CLMAX=CL0MAX+CLAMAX*ALPLIMX
C
      ALMX=CLMAX*PDYNMC*REFA
      WEIGHT=VMASS*AGRAV
      GMAX=ALMX/WEIGHT
      IF(GMAX.GE.ANLIMPX)GMAX=ANLIMPX
      ALOAD=CL*PDYNMC*REFA
      GG=ALOAD/WEIGHT
      GAVAIL=GMAX-GG
C
C*** RUN TERMINATION IF MAX G CAPABILITY IS LESS THAN TRLOAD
C
C99      IF(GMAX.LT.TRLOAD) TRCODE=4.
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE A1DER(CLA,CLDE,CMA,CMQ,CMDE,CYB,CYDR,CLNB,CLNR,CLNDR
     &,CLLP,CLLDA)
C**********************************************************************
C*** * Aerodynamic Derivaties for autopilot
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates Dimensional Derivaties (radians, meters, seconds)
C*** * (2) Calculates the Airframe Roots
C*** *
C*** * Input:
C*** *        CLA=Lift slope derivative wrt alpha - 1/deg
C*** *        CLDE=Lift force control derivative - 1/deg
C*** *        CMA=Pitching moment derivatve wrt alpha - 1/deg
C*** *        CMQ=Pitch damping derivative - 1/rad
C*** *        CMDE=Pitch moment control derivative - 1/deg
C*** *        CYB=Side force derivative wrt beta - 1/deg
C*** *        CYDR=Side force control derivative - 1/deg
C*** *        CLNB=Yawing moment derivatve wrt beta - 1/deg
C*** *        CLNR=Yaw damping derivative - 1/rad
C*** *        CLNDR=Rudder moment control derivative - 1/deg
C*** *        CLLP=Roll damping derivative - 1/rad
C*** *        CLLDA=Aileron control derivative - 1/deg
C*** *
C*** * MODIFICATION HISTORY
C*** * 990614 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
	DIMENSION AIB(3,3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1265),ALPLIMX)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(2000),T)
C
C*** INPUT FROM INITIALIZATION MODULE
C
      EQUIVALENCE (C(1204),REFA)
      EQUIVALENCE (C(1205),REFB)
      EQUIVALENCE (C(1206),REFC)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(0221),VMACH)
      EQUIVALENCE (C(1309),VMASS)
      EQUIVALENCE (C(1313),THRUST)
      EQUIVALENCE (C(1338),AIB(1,1))
      EQUIVALENCE (C(1604),DVBE)
C
C PDYNMC= O Dynamic pressure - Pa
C VMACH= O Vehicle Mach number based on DVBA
C VMASS= O Vehicle mass - kg
C THRUST= O Rocket thrust parallel to vehicle centerline - kN
C AIB= O Moment of inertia matrix - kgm^2
C DVBE= D/G Geographic speed - m/s
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1245),DLA)
      EQUIVALENCE (C(1246),DLDE)
      EQUIVALENCE (C(1247),DMA)
      EQUIVALENCE (C(1248),DMQ)
      EQUIVALENCE (C(1249),DMDE)
      EQUIVALENCE (C(1250),DYB)
      EQUIVALENCE (C(1251),DYDR)
      EQUIVALENCE (C(1252),DNB)
      EQUIVALENCE (C(1253),DNR)
      EQUIVALENCE (C(1254),DNDR)
      EQUIVALENCE (C(1255),DLP)
      EQUIVALENCE (C(1256),DLDA)
C
C DLA = O Lift force slope derivative - m/s^2
C DLDE = O Lift force control derivative - m/s^2
C DMA = O Pitch moment derivative - 1/s^2
C DMQ = O Pitch damping derivative - 1/s
C DMDE = O Pitch control derivative - 1/s^2
C DYB = O Side force slope derivative - m/s^2
C DYDR = O Side force control derivative - m/s^2
C DNB = O Yaw moment derivative - 1/s^2
C DNR = O Yaw damping derivative - 1/s
C DNDR = O Yaw control derivative - 1/s^2
C DLP = O Roll damping derivative - 1/s
C DLDA = O Roll control derivative - 1/s^2
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(1268),STMARG)
      EQUIVALENCE (C(1269),REALP1)
      EQUIVALENCE (C(1270),REALP2)
      EQUIVALENCE (C(1271),WNP)
      EQUIVALENCE (C(1272),ZETP)
      EQUIVALENCE (C(1273),RPREAL)
      EQUIVALENCE (C(1274),REALY1)
      EQUIVALENCE (C(1275),REALY2)
      EQUIVALENCE (C(1276),WNY)
      EQUIVALENCE (C(1277),ZETY)
      EQUIVALENCE (C(1278),RYREAL)
C
C STMARG = G Static margin (+stable, -unstable) - caliber
C REALP1 = G First real root of airframe pitch dynamics - rad/s
C REALP2 = G Second real root of airframe pitch dynamics - rad/s
C WNP = G Natural frequency of airframe pitch dynamics - rad/s
C ZETP = G Damping of airframe pitch dynamics - ND
C RPREAL = G Real part or mean value (real roots) of airf pitch - rad/s
C REALY1 = G First real root of airframe yaw dynamics - rad/s
C REALY2 = G Second real root of airframe yaw dynamics - rad/s
C WNY = G Natural frequency of airframe yaw dynamics - rad/s
C ZETY = G Damping of airframe yaw dynamics - ND
C RYREAL = G Real part or mean value (real roots) of airf yaw - rad/s
C
C*** Dimensional derivatives in pitch (converted to 1/rad where requried)
C
      DUML=PDYNMC*REFA/VMASS
      DLA=DUML*CLA*CRAD
	DLDE=DUML*CLDE*CRAD
C
      DUMM=PDYNMC*REFA*REFC/AIB(2,2)
      DMA=DUMM*CMA*CRAD
      DMQ=DUMM*(REFC/(2.*DVBE))*CMQ
      DMDE=DUMM*CMDE*CRAD
C
C*** Dimensional derivatives in yaw (converted to 1/rad where requried)
C
      DUMY=PDYNMC*REFA/VMASS
      DYB=DUMY*CYB*CRAD
	DYDR=DUMY*CYDR*CRAD
C
      DUMN=PDYNMC*REFA*REFB/AIB(3,3)
      DNB=DUMN*CLNB*CRAD
      DNR=DUMN*(REFB/(2.*DVBE))*CLNR
      DNDR=DUMN*CLNDR*CRAD
C
C*** Dimensional derivatives in roll (converted to 1/rad where requried)
C
      DUMLL=PDYNMC*REFA*REFB/AIB(1,1)
      DLP=DUMLL*(REFB/(2.*DVBE))*CLLP
      DLDA=DUMLL*CLLDA*CRAD
C
C*** Static margin STMARG (per cord length REFC)
C
      IF(CLA.NE.0.)STMARG=-CMA/CLA
C
C*** Pitch plane roots
C
      A11=DMQ
      A12=DMA/DLA
      A21=DLA
      A22=-DLA/DVBE
C
      ARG=(A11+A22)**2-4.*(A11*A22-A12*A21)
      IF(ARG.GE.0.) THEN
         WNP=0.
         ZETP=0.
         DUM=A11+A22
         REALP1=(DUM+SQRT(ARG))/2.
         REALP2=(DUM-SQRT(ARG))/2.
         RPREAL=(REALP1+REALP2)/2.
      ELSE
         REALP1=0.
         REALP2=0.
         WNP=SQRT(A11*A22-A12*A21)
         ZETP=-(A11+A22)/(2.*WNP)
         RPREAL=-ZETP*WNP
      ENDIF
C
C*** Yaw plane roots
C
      A11=DNR
      A12=DNB/DYB
      A21=-DYB
      A22=DYB/DVBE
C
      ARG=(A11+A22)**2-4.*(A11*A22-A12*A21)
      IF(ARG.GE.0.) THEN
         WNY=0.
         ZETY=0.
         DUM=A11+A22
         REALY1=(DUM+SQRT(ARG))/2.
         REALY2=(DUM-SQRT(ARG))/2.
         RYREAL=(REALY1+REALY2)/2.
      ELSE
         REALY1=0.
         REALY2=0.
         WNY=SQRT(A11*A22-A12*A21)
         ZETY=-(A11+A22)/(2.*WNY)
         RYREAL=-ZETY*WNY
      ENDIF
C
C*** ROLL RATE ROOT
C
      REALP=DLP
C
 100  RETURN
      END
C**********************************************************************
      SUBROUTINE A2I
C**********************************************************************
C*** * Initialization of Propulsion Module A2.
C*** * Reserved C(3510) locations are 1300-1399
C*** * Ref: "Handbook of Intelligent Control", Chapter 11 "Flight
C*** *       Propulsion, and Thermal Control of Advanced Aircraft and
C*** *       Hypersonic Vehicles", Edited by D.A.White and D.A. Sofge,
C*** *       Van Nostrand Reinhold,New York, NY, 1992
C*** * Type: turbojet 0-2 Mach
C*** *       ramjet   2-6 Mach
C*** *       scramjet 6-
C*** * Mass properties: take-off mass 136,077 kg
C*** *                  total fuel mass 81,646 kg
C*** *
C*** * MPROP=0 No thrusting
C*** *      =1 Throttle command input
C*** *      =2 Autothrottle (maintain dynamic pressure)
C*** *
C*** * This module performs the following functions:
C*** * (1) Provides propulsion deck (capture area ratio CA and ISP)
C*** * (2) Initializes vehicle mass properties
C*** * (3) Sets up fuel mass integration variable
C*** *
C*** * MODIFICATION HISTORY
C*** * 991122 Created by Peter H Zipfel
C*** * 000105 Adopted from GHAME3, PZi
C*** *
C*** ******************************************************************
C
      COMMON C(3510)
C
	COMMON /PROPULSION/TBLCA(117),TBLSPI(117)
     &,ALPHAXI(9),VMACHI(13),THRI(9)
C
      DIMENSION IPL(100),IPLV(100),AI0(3,3),AI1(3,3),AIB(3,3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C NIP = E Number of variables to integrate
C IPL(100) = E Start of derivitave c-array locations
C IPLV(100) = E Start of state c-array locations
C
C*** INITIALIZATION
C
      EQUIVALENCE (C(1301),IP1)
      EQUIVALENCE (C(1302),IP2)
      EQUIVALENCE (C(1303),IT2)
      EQUIVALENCE (C(1306),FMASS0)
      EQUIVALENCE (C(1307),VMASS0)
      EQUIVALENCE (C(1309),VMASS)
      EQUIVALENCE (C(1320),AI0(1,1))
      EQUIVALENCE (C(1329),AI1(1,1))
      EQUIVALENCE (C(1338),AIB(1,1))
C
C IP1 = I Initialize propulsion table pointer to 1 - ND
C IP2 = I Initialize propulsion table pointer to 1 - ND
C IT2 = I Initialize propulsion table pointer to 1 - ND
C FMASS0 = I Initial fuel mass - kg
C VMASS0 = I Take-off gross mass - kg
C AI0(3,3) = I Take-off MOI - kgm^2
C AI1(3,3) = I MOI at burn-out - kgm^2
C
C  MACH (13) across: .4 .6 .8 .9 .95 1.05 1.2 1.5 2. 3. 6. 12. 24. (first variab
C  AOA (9) down (deg): -3. 0. 3. 6. 9. 12. 15. 18. 21. (second variable for CA)
C  THRT (9) down: 0. .25 .5 .75 1. 1.25 1.5 1.75 2. (second variable for ISP)
C
      DATA VMACHI/.4,.6,.8,.9,.95,1.05,1.2,1.5,2.,3.,6.,12.,24./
      DATA ALPHAXI/-3.,0.,3.,6.,9.,12.,15.,18.,21./
	DATA THRI/0.,.25,.5,.75,1.,1.25,1.5,1.75,2./
C
C*** Propulsion tables based on NASA's GHAME model
C
C
C*** Capture area ratio
c
      DATA TBLCA /
     1 1.09449, 0.53018, 0.31459, 0.26226, 0.24452, 0.22157, 0.20981,
     2 0.23464, 0.34159, 0.62377, 1.45141, 2.76052, 4.68122,
     1 1.18766, 0.58304, 0.35204, 0.29597, 0.27698, 0.25238, 0.23978,
     2 0.26638, 0.38098, 0.68332, 1.57007, 2.97269, 5.03057,
     1 1.28082, 0.63590, 0.38950, 0.32969, 0.30943, 0.28319, 0.26975,
     2 0.29813, 0.42037, 0.74286, 1.68873, 3.18486, 5.37993,
     1 1.37399, 0.68875, 0.42696, 0.36341, 0.34188, 0.31401, 0.29973,
     2 0.32987, 0.45975, 0.80240, 1.80739, 3.39702, 5.72929,
     1 1.46715, 0.74161, 0.46441, 0.39713, 0.37433, 0.34482, 0.32970,
     2 0.36162, 0.49914, 0.86194, 1.92605, 3.60919, 6.07865,
     1 1.56032, 0.79447, 0.50187, 0.43085, 0.40679, 0.37563, 0.35967,
     2 0.39337, 0.53852, 0.92148, 2.04471, 3.82136, 6.42801,
     1 1.65348, 0.84732, 0.53933, 0.46457, 0.43924, 0.40644, 0.38964,
     2 0.42511, 0.57791, 0.98102, 2.16336, 4.03352, 6.77737,
     1 1.74664, 0.90018, 0.57678, 0.49829, 0.47169, 0.43726, 0.41962,
     2 0.45686, 0.61729, 1.04057, 2.28202, 4.24569, 7.12673,
     1 1.83981, 0.95304, 0.61424, 0.53201, 0.50414, 0.46807, 0.44959,
     2 0.48860, 0.65668, 1.10011, 2.40068, 4.45786, 7.47609/
C
C*** Specific impulse - sec
C
      DATA TBLSPI /
     1    0.0000,    0.0000,    0.0000,    0.0000,    0.0000,    0.0000,
     2    0.0000,    0.0000,    0.0000,    0.0000,    0.0000,    0.0000,
     3    0.0000,
     1 1693.1500, 1693.1500, 1686.9000, 1682.2125, 1679.0875, 1661.9000,
     2 1636.9000, 1568.1500, 1443.1500, 1568.1500, 1318.1500,  755.6500,
     3  505.6500,
     1 2262.3999, 2262.3999, 2253.5625, 2246.9343, 2242.5156, 2218.2126,
     2 2182.8625, 2085.6499, 1908.9000, 2085.6499, 1732.1499,  936.7750,
     3  583.2750,
     1 2699.6499, 2699.6499, 2688.8250, 2680.7063, 2675.2937, 2645.5249,
     2 2602.2251, 2483.1499, 2266.6501, 2483.1499, 2050.1499, 1075.9000,
     3  642.9000,
     1 3068.1499, 3068.1499, 3055.6499, 3046.2749, 3040.0249, 3005.6499,
     2 2955.6499, 2818.1499, 2568.1499, 2818.1499, 2318.1499, 1193.1500,
     3  693.1500,
     1 3392.6501, 3392.6501, 3378.6748, 3368.1936, 3361.2063, 3322.7749,
     2 3266.8750, 3113.1499, 2833.6499, 3113.1499, 2554.1501, 1296.4000,
     3  737.4000,
     1 3686.8999, 3686.8999, 3671.5874, 3660.1030, 3652.4468, 3610.3374,
     2 3549.0874, 3380.6499, 3074.3999, 3380.6499, 2768.1499, 1390.0250,
     3  777.5250,
     1 3956.4001, 3956.4001, 3939.8625, 3927.4595, 3919.1907, 3873.7124,
     2 3807.5625, 3625.6499, 3294.8999, 3625.6499, 2964.1501, 1475.7750,
     3  814.2750,
     1 4206.6499, 4206.6499, 4188.9751, 4175.7188, 4166.8813, 4118.2749,
     2 4047.5750, 3853.1499, 3499.6499, 3853.1499, 3146.1499, 1555.4000,
     3  848.4000/
C
C*** Initialization of integration variable
C
      IPL(NIP)=1304
      IPLV(NIP)=1305
      NIP=NIP+1
C
C*** Initializations of table pointers
C
	IP1=1
	IP2=1
	IT2=1
C
C*** Initialization of mass properties
C
      VMASS0=136077.
	VMASS=VMASS0
	FMASS0=81646.
	CALL MATZER(AI0,3,3)
	AI0(1,1)=1.573E6
	AI0(2,2)=31.6E6
	AI0(3,3)=32.54E6
	AI0(1,3)=.38E6
	AI0(3,1)=AI0(1,3)
	CALL MATZER(AI1,3,3)
	AI1(1,1)=1.18E6
	AI1(2,2)=19.25E6
	AI1(3,3)=20.2E6
	AI1(1,3)=.38E6
	AI1(3,1)=AI0(1,3)
	CALL MATEQL(AIB,AI0,3,3)
C
      RETURN
      END
C******************************************************************
      SUBROUTINE A2
C******************************************************************
C*** * Propulsion Module A2.
C*** * Reserved C(3510) locations are 1300-1399
C*** * Ref: "Handbook of Intelligent Control", Chapter 11 "Flight
C*** *       Propulsion, and Thermal Control of Advanced Aircraft and
C*** *       Hypersonic Vehicles", Edited by D.A.White and D.A. Sofge,
C*** *       Van Nostrand Reinhold,New York, NY, 1992
C*** * Type: turbojet 0-2 Mach
C*** *       ramjet   2-6 Mach
C*** *       scramjet 6-
C*** * Mass properties: take-off mass 136,077 kg
C*** *                  total fuel mass 81,646 kg
C*** *
C*** * MPROP=0 No thrusting
C*** *      =1 Throttle command input
C*** *      =2 Autothrottle (maintain dynamic pressure)
C*** *
C*** * This module performs the following functions:
C*** * (1) Calculates engine thrust
C*** * (2) Calculates mass properties
C*** *
C*** * Note: if MPROP=2, throttle must be opened by input:THRTL=>0
C*** *
C*** * MODIFICATION HISTORY
C*** * 991122 Created by Peter H Zipfel
C*** * 000105 Adopted from GHAME3, PZi
C*** *
C*** *************************************************************
C
      COMMON C(3510)
C
	COMMON /PROPULSION/TBLCA(117),TBLSPI(117)
     &,ALPHAXI(9),VMACHI(13),THRI(9)
C
      DIMENSION AI0(3,3),AI1(3,3),DUM33(3,3),DUMM33(3,3),AIB(3,3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1300),MPROP)
      EQUIVALENCE (C(1310),THRTL)
	EQUIVALENCE (C(1318),QHOLD)
	EQUIVALENCE (C(1319),THRTLMAX)
C
C MPROP = D =0:Motor off,=1:throttle command,=2:autothrottle
C THRTL = D Throttle, controlling the fuel-air ratio - ND
C QHOLD = D Dynamic pressure hold command - Pa
C THRTLMAX = D Maximum throttle setting permissable - ND
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0054),AGRAV)
      EQUIVALENCE (C(2000),T)
	EQUIVALENCE (C(2866),ICOOR)
C
C*** INITIALIZED IN A2I
C
      EQUIVALENCE (C(1301),IP1)
      EQUIVALENCE (C(1302),IP2)
      EQUIVALENCE (C(1303),IT2)
      EQUIVALENCE (C(1306),FMASS0)
      EQUIVALENCE (C(1307),VMASS0)
      EQUIVALENCE (C(1320),AI0(1,1))
      EQUIVALENCE (C(1329),AI1(1,1))
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0205),DRHO)
      EQUIVALENCE (C(0221),VMACH)
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(1260),CD)
      EQUIVALENCE (C(0344),ALPHAX)
      EQUIVALENCE (C(1204),REFA)
      EQUIVALENCE (C(1604),DVBE)
C
C DRHO= O Air density - kg/m3
C VMACH= O Vehicle Mach number based on DVBA
C PDYNMC= O Dynamic pressure - Pa
C CD= G Drag coefficient - ND
C ALPHAX= G Angle of attack - deg
C REFA= I Reference area for aero coefficients - m^2
C DVBE= D/G Geographic speed - m/s
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(1304),FMASSED)
      EQUIVALENCE (C(1305),FMASSE)
C
C FMASSED = S Derivitave of fuel mass expended - kg/sec
C FMASSE = S Fluel mass expended - kg
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1309),VMASS)
      EQUIVALENCE (C(1313),THRUST)
      EQUIVALENCE (C(1338),AIB(1,1))
C
C VMASS = O Vehicle mass - kg
C THRUST = O Rocket thrust parallel to vehicle centerline - kN
C AIB(3,3) = O Moment of inertia matrix - kgm^2
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(1311),THRSTREX)
      EQUIVALENCE (C(1312),THRTLREQ)
      EQUIVALENCE (C(1314),THRUSTX)
      EQUIVALENCE (C(1315),CA)
      EQUIVALENCE (C(1316),SPI)
      EQUIVALENCE (C(1317),FMASSR)
C
C THRSTREX = G Thrust required - kN
C THRTLREQ = G Throttle setting required - ND
C THRUSTX = G Thrust in kNewton - kN
C CA = G Capture area factor - Nd
C SPI = G Specific impulse - s
C FMASSR = G Remaining fuel mass - kg
C
CC00	PARAMETER(MX1=13,MX2=9)
CC00	PARAMETER(ACOWL=27.87)
	MX1=13
	MX2=9
	ACOWL=27.87
C
C ACOWL= Cowl area of engine - m^2
C
C*** Thrusting
C
	IF(MPROP.GE.1)THEN
         CALL TBLP2(VMACH,ALPHAX,IP1,IP2,VMACHI,ALPHAXI,MX1,MX2,TBLCA
     &   ,CA,DUM1,DUM2)	
         CALL TBLP2(VMACH,THRTL,IP1,IT2,VMACHI,THRI,MX1,MX2,TBLSPI
     &   ,SPI,DUM1,DUM2)
	   IF(MPROP.EQ.1)THEN
C***  Commanded thrust
	      THRUST=SPI*.029*THRTL*AGRAV*DRHO*DVBE*CA*ACOWL
         ELSEIF(MPROP.EQ.2)THEN
C***  Dynamic pressure hold (Autothrottl)
            THRSTREQ=REFA*CD*QHOLD/COS(ALPHAX/CRAD)
	      DUMK=.029*SPI*AGRAV*DRHO*DVBE*CA*ACOWL
	      IF(DUMK.NE.0.)THEN
		     THRTLREQ=THRSTREQ/DUMK
			 GAINQ=2.*VMASS/(DRHO*DVBE*DUMK) ! 1 sec time constant
	      ENDIF
	      ETHRTL=GAINQ*(QHOLD-PDYNMC)
	      THRTL=ETHRTL+THRTLREQ
	      IF(THRTL.LT.0.)THRTL=0.
	      IF(THRTL.GT.THRTLMAX)THRTL=THRTLMAX
            CALL TBLP2(VMACH,THRTL,IP1,IT2,VMACHI,THRI,MX1,MX2,TBLSPI
     &      ,SPI,DUM1,DUM2)
	      THRUST=SPI*.029*THRTL*AGRAV*DRHO*DVBE*CA*ACOWL
         ENDIF
C
C *** Fuel consumption and vehicle mass
C
	   IF(SPI.NE.0.) FMASSED=THRUST/(SPI*AGRAV)
	   VMASS=VMASS0-FMASSE
      ENDIF
C
	FMASSR=FMASS0-FMASSE
	IF(FMASSR.LE.0.)THEN	
	   MPROP=0
	   FMASSED=0.
	   THRUST=0.
	   THRTL=0.
	ENDIF
C
C*** Moments of inertia, linearly interpolated
C	AI=(AI1-AI0)*DUM+AI0
C
	DUM=FMASSE/FMASS0
	CALL MATSUB(DUM33,AI1,AI0,3,3)
	CALL MATCON(DUMM33,DUM,DUM33,3,3)
	CALL MATADD(AIB,DUMM33,AI0,3,3)
C
	THRUSTX=THRUST/1000.
	THRSTREX=THRSTREQ/1000.
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2I
C**********************************************************************
C*** * Autopilot Initialization Module
C*** * Reserved C(3510) locations are 900-999
C*** *
C*** * MAUT= |MAUTY|MAUTP|
C*** *
C*** *        MAUTY= 0 Ballistic
C*** *               2 SAS yaw stabilization
C*** *               3 Yaw acceleration autopilot
C*** *               4 Heading angle autopilot (inludes SAS)
C*** *
C*** *              MAUTP= 0 Ballistic
C*** *                     3 Pitch acceleration autopilot
C*** *                     4 Flight path angle autopilot
C*** *					 5 Altitude hold autopilot (inlcudes pitch accel)
C*** *
C*** * Roll position autopilot is always engaged
C*** *
C*** * Recommended combinations:
C*** *   MAUT= 23, 44, 45
C*** * Not recommended:
C*** *   MAUTY= 3 yaw acceleration autopilot not effective for GHAME
C*** *
C*** * This module performs the following functions:
C*** * (1) Initializes the state variables
C*** *
C*** * MODIFICATION HISTORY
C*** * 990613 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
      DIMENSION IPL(100),IPLV(100)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C*** STORAGE OF STATE VARIABLE LOCATIONS
C
      ILOC=914
      DO I=1,2
         IPL(NIP)=ILOC
         IPLV(NIP)=ILOC+1
         ILOC=ILOC+2
         NIP=NIP+1
      ENDDO
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2
C**********************************************************************
C*** * Autopilot Module
C*** * Reserved C(3510) locations are 900-999
C*** *
C*** * (1) MAUT= |MAUTY|MAUTP|
C*** *
C*** *        MAUTY= 0 Ballistic
C*** *               2 SAS yaw stabilization
C*** *               3 Yaw acceleration autopilot
C*** *               4 Heading angle autopilot (inludes SAS)
C*** *
C*** *              MAUTP= 0 Ballistic
C*** *                     3 Pitch acceleration autopilot
C*** *                     4 Flight path angle autopilot
C*** *					 5 Altitude hold autopilot (inlcudes pitch accel)
C*** *
C*** * (2) Roll position autopilot is always engaged
C*** *
C*** * (3) Freezes flight conditions for autopilot response.
C*** *     Frozen variables are: DVBE, VMACH, PDYNMC, VMASS, THRUST,
C*** *     AI11, AI33 and derivatives in subroutine A1DER.
C*** *     Invoked by setting  MFREEZE=1 and canceled by MFREEZE=0.
C*** *     Canceling Freeze will also cause print out of previous peak
C*** *     values and their times.
C*** *     For sequential maneuvers increment MFREEZE by "one"
C*** *     >>> not yet checked out <<<
C*** *
C*** * MODIFICATION HISTORY
C*** * 990613 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(2000),T)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0900),MAUT)
      EQUIVALENCE (C(0901),MFREEZE)
      EQUIVALENCE (C(0906),ANLIMPX)
      EQUIVALENCE (C(0907),ANLIMNX)
      EQUIVALENCE (C(0908),DELALIMX)
      EQUIVALENCE (C(0909),DELELIMX)
      EQUIVALENCE (C(0910),DELRLIMX)
      EQUIVALENCE (C(0911),PHICOMX)
      EQUIVALENCE (C(0930),PHILIMX)
      EQUIVALENCE (C(0975),THTVGCOX)
C
C MAUT = D MAUT=|MAUTY|MAUTP|,see table in Module C2
C MFREEZE = D =0:Unfreeze and print; =1:Freeze; increment for more
C ANLIMPX = D Positive structural acceleration limiter - g's
C ANLIMNX = D Neg. structural accel limiter (data is positive) - g's
C DELALIMX = D Roll command limiter - deg
C DELELIMX = D Pitch flap control limiter - deg
C DELRLIMX = D Yaw flap control limiter - deg
C PHICOMX = D Commanded roll angle - deg
C PHILIMX = D Roll angle limiter - deg
C THTVGCOX = D Commanded flight path angle - deg
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0802),ANCOMX)
      EQUIVALENCE (C(0803),AYCOMX)
C
C ANCOMX= O Normal acceleration command - g's
C AYCOMX= O Yaw acceleration command - g's
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(0919),DELACX)
      EQUIVALENCE (C(0920),DELECX)
      EQUIVALENCE (C(0921),DELRCX)
C
C DELACX = O Aileron command - deg
C DELECX = O Elevator command - deg
C DELRCX = O Rudder command - deg
C
C*** DIAGNOSTICS
C
      IF(MAUT.EQ.0) RETURN
C
      MAUTY=INT(MAUT/10.)
      MAUTP=MAUT-MAUTY*10
C
C*** Structural pitch limiter
C
	IF(ANCOMX.GT.ANLIMPX)ANCOMX=ANLIMPX
	IF(ANCOMX.LT.-ANLIMNX)ANCOMX=-ANLIMNX
C
C*** Call yaw stability augmentation system autopilot
C
      IF(MAUTY.EQ.2) CALL C2YSAS(DELRCX)
C
C*** Call yaw prop/int acceleration autopilot, command=0
C
      IF(MAUTY.EQ.3) CALL C2YACC(DELRCX,0.)
C
C*** Call pitch prop/int acceleration autopilot
C
      IF(MAUTP.EQ.3) CALL C2PACC(DELECX,ANCOMX)
C
C*** Call flight path tracking autopilot
C
      IF(MAUTP.EQ.4) CALL C2GAM(DELECX,THTVGCOX)
C
C*** Heading angle autopilot
C
	IF(MAUTY.EQ.4) THEN
	   CALL C2HEAD(PHICOMX)
         CALL C2YSAS(DELRCX)
	ENDIF
C
C*** Call altitude hold autopilot
C
      IF(MAUTP.EQ.5) THEN
	   CALL C2ALT(ANCOMX)
         CALL C2PACC(DELECX,ANCOMX)
	ENDIF
C
C*** Call roll position autopilot (for all options)
C
      IF(ABS(PHICOMX).GE.PHILIMX) PHICOMX=SIGN(PHILIMX,PHICOMX)
      CALL C2ROLL(DELACX,PHICOMX)
C
C*** Control command limiting
C
      IF(ABS(DELACX).GE.DELALIMX) DELACX=SIGN(DELALIMX,DELACX)
      IF(ABS(DELECX).GE.DELELIMX) DELECX=SIGN(DELELIMX,DELECX)
      IF(ABS(DELRCX).GE.DELRLIMX) DELRCX=SIGN(DELRLIMX,DELRCX)
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2PACC(DELECX,ANCOMX)
C**********************************************************************
C*** * Proportional/Integral acceleration autopilot for pitch (MAUTP=3)
C*** * Employs pole placement technique.
C*** * Feedback signals are: body rate (gyro) and acceleration (accel)
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates two feedback and one feed-foreward gains
C*** *     based on input of dominant closed loop conjugate complex
C*** *     roots
C*** * (2) Calculates the commanded pitch control deflections
C*** *
C*** * Argument Output
C*** *          DELECX=elevator command deflection - deg
C*** * Argument Input:
C*** *          ANCOMX=pitch acceleration command - g's
C*** *
C*** * MODIFICATION HISTORY
C*** * 990614 Created by Peter Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
      DIMENSION GAINFP(3),FSPCB(3),WBECB(3)
C
C*** INITIALIZATION
C
      EQUIVALENCE (C(0998),ISETPC2)
C
C ISETPC2 = I Flag to print freeze variables
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0054),AGRAV)
      EQUIVALENCE (C(2000),T)
      EQUIVALENCE (C(2001),TSTAGE)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0901),MFREEZE)
      EQUIVALENCE (C(0903),GAINP)
      EQUIVALENCE (C(0922),FACTWCLP)
      EQUIVALENCE (C(0923),FACTZCLP)
C
C GAINP = D Proportional gain in pitch acceleration loop - s^2/m
C FACTWCLP = D Fact assoc with closed loop natural frequency
C FACTZCLP = D Fact assoc with closed loop damping
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(0763),WBECB(1))
      EQUIVALENCE (C(0734),FSPCB(1))
      EQUIVALENCE (C(1245),DLA)
      EQUIVALENCE (C(1247),DMA)
      EQUIVALENCE (C(1248),DMQ)
      EQUIVALENCE (C(1249),DMDE)
      EQUIVALENCE (C(0702),DVBEC)
C
C PDYNMC= O Dynamic pressure - Pa
C WBECB= O Body rates wrt earth, computed - rad/s
C FSPCB= O Output of strap-down accelerometers - m/s^2
C DLA= O Lift force slope derivative - m/s^2
C DMA= O Pitch moment derivative - 1/s^2
C DMQ= O Pitch damping derivative - 1/s
C DMDE= O Pitch control derivative - 1/s^2
C DVBEC= O Computed geographic vehicle speed - m/s
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(0916),ZZD)
      EQUIVALENCE (C(0917),ZZ)
C
C ZZ = S Pitch feed-foreward integration variable- m/s
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0945),GAINFP(1))
      EQUIVALENCE (C(0948),WCLP)
      EQUIVALENCE (C(0949),ZCLP)
      EQUIVALENCE (C(0950),PCLP)
      EQUIVALENCE (C(0951),FSPB3M)
      EQUIVALENCE (C(0952),FSPB3MT)
      EQUIVALENCE (C(0985),QQXM)
      EQUIVALENCE (C(0986),QQXMT)
      EQUIVALENCE (C(0987),DELECXM)
      EQUIVALENCE (C(0988),DELECXMT)
C
C WCLP = G Nat freq of accel close loop complex pole - rad/s
C ZCLP = G Damping of accel close loop complex pole -
C PCLP = G Real pole of closed pitch loop (pos.is stable) - 1/s
C GAINFP(3) = G Feedback gain of rate, accel and control
C FSPB3M = G Max yaw accel transient - m/s^2
C FSPB3MT = G Stagetime at max yaw accel transient - s
C QQXM = G Max pitch rate transient - deg/s
C QQXMT = G Stagetime at max pitch rate transient - s
C DELECXM = G Max pitch flap transient command - deg
C DELECXMT = G Stagetime at max pitch flap transient - s
C
C*** FEEDBACK GAINS BASED ON NATURAL FREQUENCY AND DAMPING OF CONJUGATE
C*** COMPLEX POLES OF DESIRED CLOSED LOOP RESPONSE.
C
C99	FACTWCLP=-.1
C99	FACTZCLP=0.
C99
C99      WCLP=(.02*SQRT(PDYNMC)+4.)*(FACTWCLP+1.)
C99      ZCLP=(-7.E-4*SQRT(PDYNMC)+1.14)*(FACTZCLP+1.)
C99	PCLP=9.
C
C*** Gain calculations
C
	DUM=ANCOMX
	GAINFP(3)=WCLP**2*PCLP/(DLA*DMDE)
	GAINFP(2)=(2.*ZCLP*WCLP+PCLP+DMQ-DLA/DVBEC)/DMDE
	GAINFP(1)=(WCLP**2+2.*ZCLP*WCLP*PCLP+DMA+DMQ*DLA/DVBEC
     &-GAINFP(2)*DMDE*DLA/DVBEC)/(DLA*DMDE)-GAINP
C
C*** Pitch loop acceleeration autopilot
C
      ZZD=AGRAV*ANCOMX+FSPCB(3)
      DELEC=-GAINFP(1)*(-FSPCB(3))-GAINFP(2)*WBECB(2)
     &+GAINFP(3)*ZZ+GAINP*ZZD
      DELECX=DELEC*CRAD
C
C*** DIAGNOSTICS: Save maximum values of control values and their times
C
      FSPB3=FSPCB(3)
      QQX=CRAD*WBECB(2)
      IF(MFREEZE.EQ.0)THEN
         IF(ISETPC2.EQ.1)THEN
            ISETPC2=0
            WRITE(6,4)
            WRITE(6,1) FSPB3M,FSPB3MT
            WRITE(6,2) QQXM,QQXMT
            WRITE(6,3) DELRCXM,DELRCXMT
 1    FORMAT(' FSPB3M=',1PG10.3,' FSPB3MT=',1PG10.3)
 2    FORMAT('   QQXM=',1PG10.3,'   QQXMT=',1PG10.3)
 3    FORMAT('  DELECXM=',1PG10.3,'  DELECXMT=',1PG10.3)
 4    FORMAT(' *** PEAK TRANSIENT VALUE AND TIME DURING FREEZE ***')
C
         FSPB3M=0.
         QQXM=0.
         DELECXM=0.
         ENDIF
      ELSE
         ISETPC2=1
         IF(ABS(FSPB3).GT.ABS(FSPB3M))THEN
            FSPB3M=FSPB3
            FSPB3MT=TSTAGE
         ENDIF
         IF(ABS(QQX).GT.ABS(QQXM))THEN
            QQXM=QQX
            QQXMT=TSTAGE
         ENDIF
         IF(ABS(DELECX).GT.ABS(DELECXM))THEN
            DELECXM=DELECX
            DELECXMT=TSTAGE
         ENDIF
      ENDIF
C
      RETURN
      END
C*** ******************************************************************
      SUBROUTINE C2YACC(DELRCX,AYCOMX)
C**********************************************************************
C*** * Proportional/Integral acceleration autopilot for yaw (MAUTY=3)
C*** * Employs pole placement technique.
C*** * Feedback signals are: body rate (gyro) and acceleration (accel)
C*** * MAUTY=3
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates two feedback and one feed-foreward gains
C*** *     based on input of dominant closed loop conjugate complex
C*** *     roots
C*** * (2) Calculates the commanded yaw control deflections
C*** *
C*** * Argument Output
C*** *          DELRCX=rudder command deflection - deg
C*** * Argument Input:
C*** *          AYCOMX=yaw acceleration command - g's
C*** *
C*** * MODIFICATION HISTORY
C*** * 990614 Created by Peter Zipfel
C*** *
C*********************************************************************
C
      COMMON C(3510)
C
      DIMENSION GAINFY(3),FSPCB(3),WBECB(3)
C
C
C*** INITIALIZATION
C
      EQUIVALENCE (C(0999),ISETYC2)
C
C ISETYC2 = I Flag to print freeze variables
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0054),AGRAV)
      EQUIVALENCE (C(2000),T)
      EQUIVALENCE (C(2001),TSTAGE)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0901),MFREEZE)
      EQUIVALENCE (C(0904),GAINY)
      EQUIVALENCE (C(0924),FACTWCLY)
      EQUIVALENCE (C(0925),FACTZCLY)
C
C GAINY = D Proportional gain in yaw loop - s^2/m
C FACTWCLY = D Fact assoc with closed loop natural frequency - ND
C FACTZCLY = D Fact assoc with closed loop damping - ND
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(0763),WBECB(1))
      EQUIVALENCE (C(0734),FSPCB(1))
      EQUIVALENCE (C(1250),DYB)
      EQUIVALENCE (C(1252),DNB)
      EQUIVALENCE (C(1253),DNR)
      EQUIVALENCE (C(1254),DNDR)
      EQUIVALENCE (C(0702),DVBEC)
C
C PDYNMC= O Dynamic pressure - Pa
C WBECB= O Body rates wrt earth, computed - rad/s
C FSPCB= O Output of strap-down accelerometers - m/s^2
C DYB= O Side force slope derivative - m/s^2
C DNB= O Yaw moment derivative - 1/s^2
C DNR= O Yaw damping derivative - 1/s
C DNDR= O Yaw control derivative - 1/s^2
C DVBEC= O Computed geographic vehicle speed - m/s
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(0914),YYD)
      EQUIVALENCE (C(0915),YY)
C
C YY = S Yaw feed-foreward integration variable- m/s
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0957),GAINFY(1))
      EQUIVALENCE (C(0960),WCLY)
      EQUIVALENCE (C(0961),ZCLY)
      EQUIVALENCE (C(0962),PCLY)
      EQUIVALENCE (C(0963),FSPB2M)
      EQUIVALENCE (C(0964),FSPB2MT)
      EQUIVALENCE (C(0965),RRXM)
      EQUIVALENCE (C(0966),RRXMT)
      EQUIVALENCE (C(0967),DELRCXM)
      EQUIVALENCE (C(0968),DELRCXMT)
C
C GAINFY(3) = G Feedback gain of rate, accel and control
C WCLY = G Nat freq of accel close loop complex pole - rad/s
C ZCLY = G Damping of accel close loop complex pole -
C PCLY = G Real pole of closed yaw loop (pos.is stable) - 1/s
C FSPB2M = G Max pitch accel transient - m/s^2
C FSPB2MT = G Stagetime at max pitch accel transient - s
C RRXM = G Max yaw rate transient - deg/s
C RRXMT = G Stagetime at max yaw rate transient - s
C DELRCXM = G Max yaw flap transient command - deg
C DELRCXMT = G Stagetime at max yaw flap transient - s
C
C*** FEEDBACK GAINS BASED ON NATURAL FREQUENCY AND DAMPING OF CONJUGATE
C*** COMPLEX POLES OF DESIRED CLOSED LOOP RESPONSE.
C
C99	FACTWCLY=-.1
C99	FACTZCLY=0.
C99C
C99      WCLY=(.02*SQRT(PDYNMC)+4.)*(FACTWCLY+1.)
C99      ZCLY=(-7.E-4*SQRT(PDYNMC)+1.14)*(FACTZCLY+1.)
C99	PCLY=9.
C
C*** Gain calculations
C
	GAINFY(3)=-WCLY**2*PCLY/(DYB*DNDR)
	GAINFY(2)=(2.*ZCLY*WCLY+PCLY+DNR+DYB/DVBEC)/DNDR
	GAINFY(1)=(-WCLY**2-2.*ZCLY*WCLY*PCLY+DNB+DNR*DYB/DVBEC
     &-GAINFY(2)*DNDR*DYB/DVBEC)/(DYB*DNDR)-GAINY
C
C*** Yaw loop acceleration autopilot
C
      YYD=AGRAV*AYCOMX+FSPCB(2)
      DELRC=+GAINFY(1)*FSPCB(2)+GAINFY(2)*WBECB(3)
     &+GAINFY(3)*YY+GAINY*YYD
      DELRCX=DELRC*CRAD
C
C*** DIAGNOSTICS: Save maximum values of control values and their times
C
      FSPB2=FSPCB(2)
      RRX=CRAD*WBECB(3)
      IF(MFREEZE.EQ.0)THEN
         IF(ISETYC2.EQ.1)THEN
            ISETYC2=0
            WRITE(6,4)
            WRITE(6,1) FSPB2M,FSPB2MT
            WRITE(6,2) RRXM,RRXMT
            WRITE(6,3) DELRCXM,DELRCXMT
 1    FORMAT(' FSPB2M=',1PG10.3,' FSPB2MT=',1PG10.3)
 2    FORMAT('    RRXM=',1PG10.3,'   RRXMT=',1PG10.3)
 3    FORMAT('   DELRCXM=',1PG10.3,'  DELRCXMT=',1PG10.3)
 4    FORMAT(' *** PEAK TRANSIENT VALUE AND TIME DURING FREEZE ***')
 
C
         FSPB2M=0.
         RRXM=0.
         DELRCXM=0.
         ENDIF
      ELSE
         ISETYC2=1
         IF(ABS(FSPB2).GT.ABS(FSPB2M))THEN
            FSPB2M=FSPB2
            FSPB2MT=TSTAGE
         ENDIF
         IF(ABS(RRX).GT.ABS(RRXM))THEN
            RRXM=RRX
            RRXMT=TSTAGE
         ENDIF
         IF(ABS(DELRCX).GT.ABS(DELRCXM))THEN
            DELRCXM=DELRCX
            DELRCXMT=TSTAGE
         ENDIF
      ENDIF
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2ROLL(DELACX,PHICOMX)
C**********************************************************************
C*** * Roll Position Autopilot
C*** * Employs pole placement technique
C*** * This autopilot is always engaged
C*** *
C*** * This subroutine performs the following functions:
C*** *
C*** * (1) Calculates gains
C*** * (2) Calculates aileron command
C*** *
C*** * Argument Output:
C*** *          DELACX=Aileron command deflection- deg
C*** *
C*** * Argument Input:
C*** *          PHICOMX=Roll control command - deg
C*** *
C*** * MODIFICATION HISTORY
C*** * 990615 Created by Peter Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
	DIMENSION WBECB(3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0912),WRCL)
      EQUIVALENCE (C(0913),ZRCL)
C
C WRCL = D Natural freq of roll closed loop complex pole - rad/s
C ZRCL = D Damping of roll closed loop pole -
C
C*** INPUT FROM OTHER MODULES
C
	EQUIVALENCE (C(0757),PHIBGCX)
	EQUIVALENCE (C(0763),WBECB(1))
      EQUIVALENCE (C(1255),DLP)
      EQUIVALENCE (C(1256),DLDA)
C
C PHIBGCX= O Roll angle, computed - deg
C WBECB= O Body rates wrt earth, computed - rad/s
C DLP= O Roll damping derivative - 1/s
C DLDA= O Roll control derivative - 1/s^2
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0931),GKP)
      EQUIVALENCE (C(0932),GKPHI)
C
C GKP = G Gain of roll rate feedback - s
C GKPHI = G Gain of roll angle feedback -
C
C*** Feedback gains
C
      GKP=(2.*ZRCL*WRCL+DLP)/DLDA
      GKPHI=WRCL**2/DLDA
C
C*** Roll position control
C
      EPHI=GKPHI*(PHICOMX-PHIBGCX)/CRAD
      DELAC=EPHI-GKP*WBECB(1)
      DELACX=DELAC*CRAD
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2YSAS(DELRCX)
C**********************************************************************
C*** * Yaw Stability Augmentation System
C*** * Employs pole placement techniques
C*** * MAUTY=2
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates yaw feedback gain
C*** * (3) Ouputs actuator fin contol commands
C*** *
C*** * Argument Output:
C*** *          DELRCX=Yaw control flap command deflection - deg
C*** *
C*** * MODIFICATION HISTORY
C*** * 990618 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
	DIMENSION WBECB(3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0970),ZSAS)
C
C ZSAS = D Desired damping of closed rate loop ND
C
C*** INPUT FROM OTHER MODULES
C
	EQUIVALENCE (C(0763),WBECB(1))
      EQUIVALENCE (C(1250),DYB)
      EQUIVALENCE (C(1251),DYDR)
      EQUIVALENCE (C(1252),DNB)
      EQUIVALENCE (C(1253),DNR)
      EQUIVALENCE (C(1254),DNDR)
      EQUIVALENCE (C(0702),DVBEC)
C
C WBECB= O Body rates wrt earth, computed - rad/s
C DYB= O Side force slope derivative - m/s^2
C DYDR= O Side force control derivative - m/s^2
C DNB= O Yaw moment derivative - 1/s^2
C DNR= O Yaw damping derivative - 1/s
C DNDR= O Yaw control derivative - 1/s^2
C DVBEC= O Computed geographic vehicle speed - m/s
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0972),ZEROSAS)
      EQUIVALENCE (C(0973),GAINSAS)
      EQUIVALENCE (C(0974),WNSAS)
C
C ZEROSAS = G Numerator pole of rate TR.FCT. - 1/rad
C GAINSAS = G Feedback gain of rate loop - ND
C WNSAS = G Nat freq of closed rate loop - rad/s
C
C *** PARAMETERS OF OPEN LOOP ANGULAR RATE TRANSFER FUNCTION
C
      ZEROSAS=-DYB/DVBEC+DNB*DYDR/(DVBEC*DNDR)
      AA=-DNR-DYB/DVBEC
      BB=DNB+DYB*DNR/DVBEC
C
C*** FEEDBACK GAIN OF RATE LOOP GIVEN DESIRED CLOSED LOOP ZSAS
C
      DUM1=(AA-2.*ZSAS**2*ZEROSAS)
      DUM2=AA**2-4.*ZSAS**2*BB
      RADIX=DUM1**2-DUM2
      IF(RADIX.LT.0.)THEN
      ELSE
         GAINSAS=(-DUM1+SQRT(RADIX))/(-DNDR)
      ENDIF
C
C*** NATURAL FREQUENCY OF CLOSED RATE LOOP
C
      DUM3=GAINSAS*DNDR*ZEROSAS
      RADIX=BB+DUM3
      IF(RADIX.LT.0.)THEN
      ELSE
         WNSAS=SQRT(RADIX)
      ENDIF
C
C*** COMMANDED YAW FIN CONTROL DELRCX
C
      DELRCX=CRAD*GAINSAS*WBECB(3)
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2GAM(DELECX,THTVGCOX)
C**********************************************************************
C*** * Flight Path Angle Tracking (Gamma-Hold) Autopilot (MAUTP=4)
C*** * Employs pole placement technique
C*** * Feedback signals are: body rate (gyro), body pitch angle (INS)
C*** * and flight path angle (INS)
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates three feedback and one feed-foreward gain
C*** *     based on input of closed loop conjugate complex pair
C*** *     and one real pole (WGAM, ZGAM, PGAM).
C*** * (2) Calculates the commanded pitch control deflections
C*** * Note: MFREEZE not operative
C*** *
C*** * Argument Output:
C*** *          DELECX=Pitch flap command deflection - deg
C*** *
C*** * Argument Input:
C*** *          THTVGCOX=Flight path angle command - deg
C*** *
C*** * MODIFICATION HISTORY
C*** * 970106 Created by Peter Zipfel
C*** * 990618 Adapted for GHAME vehicle PZi
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
      DIMENSION A(3,3),BB(3),GAINFB(3),DUM33(3,3)
     &,DU33(3,3),DU33I(3,3),DUM3(3),CC(3)
     &,WBECB(3)
C
      DOUBLE PRECISION DP(3,3),DPI(3,3),DD(3),DGAINFB(3)
     &,DAM,DBM,DCM,DDETP,DDMDE,DDLDE,DDLA,DDMQ,DDMA,DDVBEC
C
C*** INITIALIZATION
C
      EQUIVALENCE (C(0997),ISETGC2)
C
C ISETC2 = I Flag to print freeze variables
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0054),AGRAV)
      EQUIVALENCE (C(2000),T)
      EQUIVALENCE (C(2001),TSTAGE)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0901),MFREEZE)
      EQUIVALENCE (C(0976),PGAM)
      EQUIVALENCE (C(0977),WGAM)
      EQUIVALENCE (C(0978),ZGAM)
C
C PGAM = D Loc of accel close loop real pole (pos. stable)- rad/s
C WGAM = D Nat freq of accel close loop complex pole - rad/s
C ZGAM = D Damping of accel close loop complex pole - ND
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0220),PDYNMC)
	EQUIVALENCE (C(0763),WBECB(1))
	EQUIVALENCE (C(0758),THTBGCX)
      EQUIVALENCE (C(0702),DVBEC)
      EQUIVALENCE (C(0771),THTUGCX)
      EQUIVALENCE (C(1245),DLA)
      EQUIVALENCE (C(1246),DLDE)
      EQUIVALENCE (C(1247),DMA)
      EQUIVALENCE (C(1248),DMQ)
      EQUIVALENCE (C(1249),DMDE)
C
C PDYNMC= O Dynamic pressure - Pa
C WBECB= O Body rates wrt earth, computed - rad/s
C THTBGCX= O Pitch angle, computed - deg
C DVBEC= O Computed geographic vehicle speed - m/s
C DLA= O Lift force slope derivative - m/s^2
C DLDE= O Lift force control derivative - m/s^2
C DMA= O Pitch moment derivative - 1/s^2
C DMQ= O Pitch damping derivative - 1/s
C DMDE= O Pitch control derivative - 1/s^2
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0979),DETP)
      EQUIVALENCE (C(0980),DETDUM)
      EQUIVALENCE (C(0981),GAINFB(1))
      EQUIVALENCE (C(0984),GAINFF)
      EQUIVALENCE (C(0985),QQXM)
      EQUIVALENCE (C(0986),QQXMT)
      EQUIVALENCE (C(0987),DELECXM)
      EQUIVALENCE (C(0988),DELECXMT)
C
C DETP = G Determinant of P matrix at inversion
C DETDUM = G Determinat of intermediate matrix at inversion
C GAINFB(3) = G Feedback gain of rate, accel and control
C GAINFF = G Feed-foreward gain of acceleration command
C QQXM = G Max pitch rate transient - deg/s
C QQXMT = G Stagetime at max pitch rate transient - s
C DELECXM = G Max pitch flap transient - deg
C DELECXMT = G Stagetime at max pitch flap transient - s
C
C*** THREE STATE A-MATRIX (BODY RATE, ACCELERATION, FIN DEFLECTION)
C
      A(1,1)=DMQ
      A(1,2)=DMA
      A(1,3)=-DMA
      A(2,1)=1.
      A(2,2)=0.
      A(2,3)=0.
      A(3,1)=0.
      A(3,2)=DLA/DVBEC
      A(3,3)=-DLA/DVBEC
C
C*** B-MATRIX
C
      BB(1)=DMDE
      BB(2)=0.
      BB(3)=DLDE/DVBEC
C
C*** FEEDBACK GAINS BASED ON NATURAL FREQUENCY AND DAMPING OF CONJUGATE
C*** COMPLEX POLES AND REAL POLE OF DESIRED CLOSED LOOP RESPONSE. POLE
C*** PLACEMENT TECHNIQUE
C
      AM=2.*ZGAM*WGAM+PGAM
      BM=WGAM**2+2.*ZGAM*WGAM*PGAM
      CM=+WGAM**2*PGAM
C
C*** CONVERSION TO DOUBLE PRECISION
C
      DAM=DBLE(AM)
      DBM=DBLE(BM)
      DCM=DBLE(CM)
	DDMDE=DBLE(DMDE)
	DDLDE=DBLE(DLDE)
	DDLA=DBLE(DLA)
	DDMQ=DBLE(DMQ)
	DDMA=DBLE(DMA)
	DDVBEC=DBLE(DVBEC)
      DP(1,1)=DDMDE				
      DP(1,2)=0.
      DP(1,3)=DDLDE/DDVBEC
      DP(2,1)=DDMDE*DDLA/DDVBEC-DDLDE*DDMA/DDVBEC
      DP(2,2)=DDMDE
      DP(2,3)=-DDMQ*DDLDE/DDVBEC
      DP(3,1)=0.
      DP(3,2)=DDLA*DDMDE/DDVBEC-DDMA*DDLDE/DDVBEC
      DP(3,3)=DDMDE*DDLA/DDVBEC-DDMA*DDLDE/DDVBEC
C
      DD(1)=DAM+DDMQ-DDLA/DDVBEC
      DD(2)=DBM+DDMA+DDMQ*DDLA/DDVBEC
      DD(3)=DCM
C
      CALL DMATINV(DPI,DP,DDETP,3)
      CALL DMATMUL(DGAINFB,DPI,DD,3,3,1)
C
C*** CONVERSION TO SINGLE PRECISION
C
      CALL DMATSGL(GAINFB,DGAINFB,3,1)
      DETP=SNGL(DDETP)
C
C*** STEADY-STATE FEED-FORWARD GAIN TO ACHIEVE UNIT GAMMA RESPONSE
C
      CALL MATMUL(DUM33,BB,GAINFB,3,1,3)
      CALL MATSUB(DU33,A,DUM33,3,3)
      CALL MATINV(DU33I,DU33,DETDUM,3)
      CALL MATMUL(DUM3,DU33I,BB,3,3,1)
      CALL VECVEC(CC,0.,0.,1.)
      CALL MATSCA(DUM,CC,DUM3,3)
      GAINFF=-1./DUM
C
C*** PITCH CONTROL OF GAMMA AUTOPILOT
C
      THTC=GAINFF*THTVGCOX/CRAD
      QQF=GAINFB(1)*WBECB(2)
      THTBGF=GAINFB(2)*THTBGCX/CRAD
      THTUGF=GAINFB(3)*THTUGCX/CRAD
      DELEC=THTC-(QQF+THTBGF+THTUGF)
      DELECX=DELEC*CRAD
C
C*** DIAGNOSTICS: SAVE MAXIMUM VALUES OF CONTROL VARIABLES AND THEIR TIMES
C
      QQX=CRAD*WBECB(2)
      THTBGX=THTBGCX
	THTUGX=THTUGCX
      IF(MFREEZE.EQ.0)THEN
         IF(ISETC2.EQ.1)THEN
            ISETC2=0
            WRITE(6,4)
            WRITE(6,2) QQXM,QQXMT,THTBGXM,THTBGXMT
            WRITE(6,3) THTUGXM,THTUGXMT,DELECXM,DELECXMT
 2    FORMAT('   QQXM=',1PG10.3,'   QQXMT=',1PG10.3,' THTBGXM='
     +,1PG10.3,'THTBGXMT=',1PG10.3)
 3    FORMAT('THTUGXM=',1PG10.3,'THTUGXMT=',1PG10.3,'   DELECXM='
     +,1PG10.3,'  DELECXMT=',1PG10.3)
 4    FORMAT(' *** PEAK TRANSIENT VALUE AND TIME DURING FREEZE ***')
C
         QQXM=0.
         THTBGXM=0.
         THTUGXM=0.
         DELECXM=0.
         ENDIF
      ELSE
         ISETC2=1
         IF(ABS(QQX).GT.ABS(QQXM))THEN
            QQXM=QQX
            QQXMT=TSTAGE
         ENDIF
         IF(ABS(THTBGX).GT.ABS(THTBGXM))THEN
            THTBGXM=THTBGX
            THTBGXMT=TSTAGE
         ENDIF
         IF(ABS(THTUGX).GT.ABS(THTUGXM))THEN
            THTUGXM=THTUGX
            THTUGXMT=TSTAGE
         ENDIF
         IF(ABS(DELECX).GT.ABS(DELECXM))THEN
            DELECXM=DELECX
            DELECXMT=TSTAGE
         ENDIF
      ENDIF
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2HEAD(PHICOMX)
C**********************************************************************
C*** * Heading hold autopilot
C*** * Generates bank command for roll autopilot
C*** * Employs pole placement technique with the condition that the
C*** *  real pole of the closed loop heading transfer function equals
C*** *  the product of natural frequency and damping of the roll transfer functi
C*** * MAUTY=4
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates the heading loop forward gain.
C*** * (2) Ouputs roll position command
C*** *
C*** * Argument Output:
C*** *          PHICOMX=Roll position command - deg
C*** *
C*** * MODIFICATION HISTORY
C*** * 990713 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
	DIMENSION GRAVG(3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0926),PSIVGCOX)
      EQUIVALENCE (C(0928),FACTHEAD)
C
C PSIVGCOX = D Heading command - deg
C FACTHEAD = D Factor to reduce gain GAINPSI*(1.+FACTHEAD)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0223),GRAVG(1))
      EQUIVALENCE (C(0912),WRCL)
      EQUIVALENCE (C(0913),ZRCL)
      EQUIVALENCE (C(0702),DVBEC)
	EQUIVALENCE (C(0770),PSIVGCX)
C
C GRAVG= O Gravitational acceleration in geogr axes - m/s2
C WRCL= D Natural freq of roll closed loop complex pole - rad/s
C ZRCL= D Damping of roll closed loop pole -
C DVBEC= O Computed geographic vehicle speed - m/s
C PSIVGCX= O Heading angle, computed - deg
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0927),GAINPSI)
C
C GAINPSI = D Heading control gain - ND
C
C *** Gain calculation
C
	CALL MATABS(GRAV,GRAVG,3)
	GAINPSI=(DVBEC/GRAV)*ZRCL*WRCL*(1.-ZRCL**2)*(1.+FACTHEAD)
C
C*** Roll command
C
	PHICOMX=GAINPSI*(PSIVGCOX-PSIVGCX)
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE C2ALT(ANCOMX)
C**********************************************************************
C*** * Altitude hold autopilot
C*** * Generates accleration command for pitch acceleration autopilot,
C*** *  correcting for bank angle
C*** * MAUTP=5
C*** *
C*** * This subroutine performs the following functions:
C*** * (1) Calculates the pitch acceleration command
C*** *
C*** * Argument Output:
C*** *          ANCOMX=Pich acceleration command - g's
C*** *
C*** * MODIFICATION HISTORY
C*** * 990713 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
	DIMENSION VBEGC(3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0054),AGRAV)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0933),BALTCOM)
      EQUIVALENCE (C(0934),GAINALT)
      EQUIVALENCE (C(0935),GAINALTD)
C
C BALTCOM = D Altitude hold command - m
C GAINALT = D Altitude gain - 1/s
C GAINALTD = D Altitude rate gain - 1/s
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0757),PHIBGCX)
      EQUIVALENCE (C(0756),BALTC)
      EQUIVALENCE (C(0760),VBEGC(1))
C
C PHIBGCX= O Roll angle, computed - deg
C BALTC= O Altitude, computed - m
C VBEGC= O Geographic velocity, computed - m/s
C
C*** DIAGNOSTICS
C
	BALTCD=-VBEGC(3)
C
C*** Acceleration command
C
	EH=GAINALT*(BALTCOM-BALTC)
	ANCOMX=(1./COS(PHIBGCX/CRAD))*(GAINALTD*(EH-BALTCD)+AGRAV)/AGRAV
C	
      RETURN
      END
C**********************************************************************
      SUBROUTINE A3
C**********************************************************************
C*** * Force Module A3
C*** * Reserved C(3510) locations are 1400-1499
C*** * This module performs the following functions:
C*** *
C*** * (1) Calculates the non-gravitational forces
C*** * (2) Calculates the aerodynamic moments
C*** *
C*** * MODIFICATION HISTORY
C*** * 990604 Created by Peter Zipfel
C*** *
C*** ******************************************************************
C
      COMMON C(3510)
C
      DIMENSION FAPB(3),FMB(3),FPB(3),FMPB(3),FAB(3),FMAB(3)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(1020),FPB(1))
      EQUIVALENCE (C(1023),FMPB(1))
      EQUIVALENCE (C(1204),REFA)
      EQUIVALENCE (C(1205),REFB)
      EQUIVALENCE (C(1206),REFC)
      EQUIVALENCE (C(1220),CX)
      EQUIVALENCE (C(1221),CY)
      EQUIVALENCE (C(1222),CZ)
      EQUIVALENCE (C(1223),CLL)
      EQUIVALENCE (C(1224),CLM)
      EQUIVALENCE (C(1225),CLN)
      EQUIVALENCE (C(1313),THRUST)
C
C PDYNMC= O Dynamic pressure - Pa
C REFA= I Reference area for aero coefficients - m^2
C REFB= I Reference length wingspan - m
C REFC= I Reference length mean aerodynamic cord - m
C CX= O Body x-force coefficient - ND
C CY= O Side force coefficient - ND
C CZ= O Body z-force coefficient - ND
C CLL= O Rolling moment coefficient
C CLM= O Pitching moment coefficient
C CLN= O Yawing moment coefficient
C THRUST= O Rocket thrust parallel to vehicle centerline - kN
C
C*** OUTPUTS TO OTHER MODULES
C
      EQUIVALENCE (C(1410),FAPB(1))
      EQUIVALENCE (C(1413),FMB(1))
C
C FAPB(3) = O Aerodynamic and propulsive forces in body axes - N
C FMB(3) = O Aerodynamic and propulsive moments in body axes - N*m
C
c*** DIAGNOSTICS
C
      EQUIVALENCE (C(1416),FAB(1))
      EQUIVALENCE (C(1419),FMAB(1))
C
C FAB(3) = G Aerodynamic force in body axes - N
C FMAB(3) = G Aerodynamic moment in body axes - N*m
C
C*** TOTAL NON-GRAVITATIONAL FORCES
C
      FAB(1)=PDYNMC*REFA*CX+THRUST
      FAB(2)=PDYNMC*REFA*CY
      FAB(3)=PDYNMC*REFA*CZ
      CALL MATADD(FAPB,FAB,FPB,3,1)
C
C*** AERODYNAMIC AND PROPULSIVE MOMENTS
C
      FMAB(1)=PDYNMC*REFA*REFB*CLL
      FMAB(2)=PDYNMC*REFA*REFC*CLM
      FMAB(3)=PDYNMC*REFA*REFB*CLN
      CALL MATADD(FMB,FMAB,FMPB,3,1)
C
      RETURN
      END
C*******************************************************************
      SUBROUTINE D1I
C*** **************************************************************
C*** * Initializes the equations of motions in Module D1
C*** * Reserved C(3510) locations are 1600-1699
C*** * This module performs the following functions
C*** *
C*** * 1) Initialize state variables
C*** * 2) Converts geographic inputs into inertial coordinates
C*** *	Initialize
C*** *		Position: BLONX, BLATX, BALT
C*** *		Velocity: ALPHA0X, BETA0X, DBVE
C*** *		Attitude: PSIBGX, THTBGX, PHIBGX
C*** *
C*** * MODIFICATION HISTORY
C*** * 993003 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
      DIMENSION IPL(100),IPLV(100),VBEG(3),TGE(3,3),TEI(3,3)
     &,SBIE(3),TVG(3,3),TGV(3,3),TIE(3,3),SBII(3),TIG(3,3),TGI(3,3)
     &,WEII(3,3),DUM3(3),VBEI(3),VBII(3),TBG(3,3),TGB(3,3),VBEB(3)
C
C*** INPUT DATA FOR INITIALIZATION
C
      EQUIVALENCE (C(1604),DVBE)
      EQUIVALENCE (C(1605),ALON0)
      EQUIVALENCE (C(1606),ALPHA0X)
      EQUIVALENCE (C(1607),BETA0X)
      EQUIVALENCE (C(1640),BLONX)
      EQUIVALENCE (C(1641),BLATX)
      EQUIVALENCE (C(1669),BALT)
C
C DVBE = D/G Geographic speed - m/s
C ALON0 = D Greenwich siderial hour angle - rad
C ALPHA0X = D Initial angle-of-attack - deg
C BETA0X = D Initial side slip angle - deg
C BLONX = D/G Vehicle longitude - deg
C BLATX = D/G Vehicle latitude - deg
C BALT = D/G Vehicle altitude = m
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0051),REARTH)
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0058),WEII3)
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C REARTH = E Mean earth radius =6371E+3 - m
C CRAD = E Conversion from rad. to deg.=57.29577951 -deg/rad
C WEII3 = E Earth's angluar velocity =7.2921154E-05 - rad/sec
C IPL(100) = E State derivitave c-array locations
C IPLV(100) = E State c-array locations
C N = E Number of variables to integrate
C
C*** INITIALIZATION INPUT FROM G3 MODULE
C
	EQUIVALENCE (C(0350),TBG(1,1))
C
C*** INITIALIZATION OUTPUT
C
      EQUIVALENCE (C(1602),PSIVGX)
      EQUIVALENCE (C(1603),THTVGX)
      EQUIVALENCE (C(1613),VBII(1))
      EQUIVALENCE (C(1619),SBII(1))
      EQUIVALENCE (C(1622),TGV(1,1)) !? IS IT NEEDED
      EQUIVALENCE (C(1631),TGI(1,1))
	EQUIVALENCE (C(1649),VBEG(1))
      EQUIVALENCE (C(1667),BLON)
      EQUIVALENCE (C(1668),BLAT)
	EQUIVALENCE (C(1670),DVBI)
	EQUIVALENCE (C(1671),DBI)
C
C PSIVGX = D/G Heading angle from north - deg
C THTVGX = D/G Flight path angle from horizontal - deg
C TGV(3,3) = I TM of geographic wrt geo. velocity coordinates- ND
C TGI(3,3) = I TM	of geographic wrt inertial coordinates - ND	
C
C***  Identifying state variables for integration
C
      ILOC=1610
      DO I=0,2
         IPL(NIP)=ILOC+I
         IPLV(NIP)=ILOC+I+3
         NIP=NIP+1
      ENDDO
C
      ILOC=1616
      DO I=0,2
         IPL(NIP)=ILOC+I
         IPLV(NIP)=ILOC+I+3
         NIP=NIP+1
      ENDDO
C
C*** Convert geodetic BLONX, BLATX, BALT to SBII(3x1)
C
	BLON=BLONX/CRAD
	BLAT=BLATX/CRAD
	CALL CADINE84(SBII,BLON,BLAT,BALT,ALON0)
	CALL MATABS(DBI,SBII,3)
C
C*** Given ALPHA, BETA, DBVE and TBG(3x3), initialize VBII(3x1)
C
      ALPHA0=ALPHA0X/CRAD
      BETA0=BETA0X/CRAD
      SALP=SIN(ALPHA0)
      CALP=COS(ALPHA0)
      SBET=SIN(BETA0)
      CBET=COS(BETA0)
C
      VBEB(1)=CALP*CBET*DVBE
      VBEB(2)=SBET*DVBE
      VBEB(3)=SALP*CBET*DVBE
C
      CALL MATTRA(TGB,TBG,3,3)
      CALL MATMUL(VBEG,TGB,VBEB,3,3,1)
	CALL CADTGI84(TGI,BLON,BLAT,BALT,ALON0)
	CALL MATTRA(TIG,TGI,3,3)
      CALL MATMUL(VBEI,TIG,VBEG,3,3,1)
      CALL MATZER(WEII,3,3)
      WEII(1,2)=-WEII3
      WEII(2,1)=WEII3
      CALL MATMUL(DUM3,WEII,SBII,3,3,1)
      CALL MATADD(VBII,VBEI,DUM3,3,1)
      CALL MAT2TR(TVG,PSIVG,THTVG) !? NEEDED
      CALL MATTRA(TGV,TVG,3,3) !? NEEDED
	CALL MATABS(DVBI,VBII,3)
C
C
C*** Flight path angles PSIVG, THTVG
C
      CALL MATPOL(DUM,PSIVG,THTVG,VBEG)
      PSIVGX=PSIVG*CRAD
      THTVGX=THTVG*CRAD
 
      RETURN
      END
C******************************************************************
      SUBROUTINE D1
C******************************************************************
C*** * Newton Module D1
C*** * Reserved C(3510) locations are 1600-1699
C*** * This module performs the following functions:
C*** *
C*** * (1) Integrates vehicle's inertial velocity in inertial axes
C*** * (2) Integrates vehicle's inertial position in inertial axes
C*** *
C*** * MODIFICATION HISTORY
C*** * 990330 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
	DIMENSION FAPB(3),FSPB(3),TIB(3,3),FSPI(3),GRAVG(3),TIG(3,3)
     &,GRAVI(3),VBIID(3),VBII(3),SBIID(3),SBII(3),WEII(3,3),DUM3(3)
     &,TGI(3,3),VBEG(3),VBEI(3),TVG(3,3),TBI(3,3)
 
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1605),ALON0)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0051),REARTH)
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0054),AGRAV)
      EQUIVALENCE (C(0058),WEII3)
	EQUIVALENCE (C(2000),T)
	EQUIVALENCE (C(2664),DER)
      EQUIVALENCE (C(2866),ICOOR)
C
C ICOOR = E Intgration cycle index (=0:predictor,=1:corrector)
C
C*** INITIALIZATION
C
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0223),GRAVG(1))
      EQUIVALENCE (C(0320),TBI(1,1)) !<
      EQUIVALENCE (C(0901),MFREEZE)
      EQUIVALENCE (C(1309),VMASS)
      EQUIVALENCE (C(1410),FAPB(1))
C
C GRAVG= O Gravitational acceleration in geogr axes - m/s2
C TBI= S Transf matrix of body wrt inertial axes - ND
C MFREEZE= D =0:Unfreeze and print; =1:Freeze; increment for more
C VMASS= O Vehicle mass - kg
C FAPB= O Aerodynamic and propulsive forces in body axes - N
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(1610),VBIID(1))
      EQUIVALENCE (C(1613),VBII(1))
      EQUIVALENCE (C(1616),SBIID(1))
      EQUIVALENCE (C(1619),SBII(1))
C
C VBII(3) = S Vehicle velocity in inertial axes - m/s
C SBII(3) = S Vehicle pos. wrt point I in inertial axes - m
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1604),DVBE)
	EQUIVALENCE (C(1631),TGI(1,1))
      EQUIVALENCE (C(1646),FSPB(1))
      EQUIVALENCE (C(1649),VBEG(1))
      EQUIVALENCE (C(1669),BALT)
	EQUIVALENCE (C(1670),DVBI)
	EQUIVALENCE (C(1671),DBI)
	EQUIVALENCE (C(1675),PSIVG)
	EQUIVALENCE (C(1676),THTVG)
C
C DVBE = I/O Vehicle geographic speed - m/s
C FSPB(3) = O Specific force in body axes - m/s^2
C VBEG(3) = O Vehicle's velocity wrt earth in geographic axes - m/s
C BALT = O Height above sea level - m
C DVBI = O Inertial speed of vehicle - m/s
C DBI = O Distance of vehicle from center of earth - m
C PSIVG = G Geographic heading angle - rad
C THTVG = G Geographic flight path angle - rad
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(1602),PSIVGX)
      EQUIVALENCE (C(1603),THTVGX)
      EQUIVALENCE (C(1640),BLONX)
      EQUIVALENCE (C(1641),BLATX)
      EQUIVALENCE (C(1644),ANX)
      EQUIVALENCE (C(1645),AYX)
	EQUIVALENCE (C(1653),BALTKFX)
      EQUIVALENCE (C(1654),GNDTKMX)
	EQUIVALENCE (C(1655),GNDTNMX)
      EQUIVALENCE (C(1667),BLON)
      EQUIVALENCE (C(1668),BLAT)
C
C PSIVGX = G Geographic heading angle - deg
C THTVGX = G Geographic flight path angle - deg
C GNDTCK = G Ground track - m
C BLONX = G Vehicle longitude - deg
C BLATX = G Vehicle latitude - deg
C ANX = G Normal specific force component - g's
C AYX = G Lateral specific force component - g's
C BALTKFX = G Missile altitude - kft
C GNDTKMX = G Groundtrack distance - km
C GNDTNMX = G Groundtrack distance - nmi
C BLON = G Vehicle longitude - rad
C BLAT = G Vehicle latitude - rad
C
C*** Vehicle acceleration in inertial axes, integrated to get velocity VBII(3x1)
C
      CALL MATCON(FSPB,1./VMASS,FAPB,3,1)
	CALL MATTRA(TIB,TBI,3,3)
	CALL MATMUL(FSPI,TIB,FSPB,3,3,1)
	CALL MATTRA(TIG,TGI,3,3)
      CALL MATMUL(GRAVI,TIG,GRAVG,3,3,1)
      CALL MATADD(VBIID,FSPI,GRAVI,3,1)
      CALL MATABS(DVBI,VBII,3)
C
C*** Vehicle velocity, integrated for inertial position SBII(3x1)
C 	
	CALL MATEQL(SBIID,VBII,3,1)
	CALL MATABS(DBI,SBII,3)
C
C*** Geographic longitude, latitude and altitude
C
      CALL CADGEO84(BLON,BLAT,BALT,SBII,ALON0)
 	BALTKFX =.001*BALT/.3048  ! altitude in kfeet (just in case we need it)
      CALL CADTGI84(TGI,BLON,BLAT,BALT,ALON0)
	BLONX=BLON*CRAD
	BLATX=BLAT*CRAD
C
C*** Geographic velocity in geographic axes VBEG(3x1)
C 	
      CALL MATZER(WEII,3,3)
      WEII(1,2)=-WEII3
      WEII(2,1)=WEII3
      CALL MATMUL(DUM3,WEII,SBII,3,3,1)
	CALL MATSUB(VBEI,VBII,DUM3,3,1)
	CALL MATMUL(VBEG,TGI,VBEI,3,3,1)
C
C*** Geographic speed DVBE and flight path angles PSIVG, THTVG
C
      CALL MATPOL(DVBE,PSIVG,THTVG,VBEG)
      PSIVGX=PSIVG*CRAD
      THTVGX=THTVG*CRAD
C
C*** TM of geographic velocity wrt geographic coordinates TVG
C
      CALL MAT2TR(TVG,PSIVG,THTVG)
C
C*** DIAGNOSTIC: Accelerations achieved, AN normal, AL side acceleration
C
      ANX=-FSPB(3)/AGRAV
      AYX=FSPB(2)/AGRAV
C
C*** DIAGNOSTIC: Ground track travelled (Warning: within 10%, usually high)
C
      IF(ICOOR.EQ.1)THEN
         GNDTCK=SQRT(VBEG(1)**2+VBEG(2)**2)*DER*REARTH/DBI+GNDTCK
	   GNDTKMX=.001*GNDTCK  ! in km
	   GNDTNMX=.5396*GNDTKMX  ! in nmi
      END IF
C
C*** Freeze variables for autopilot response
C
      IF(MFREEZE.EQ.0) THEN
         MFREEZEM=0
      ELSE
         IF(MFREEZE.NE.MFREEZEM) THEN
            MFREEZEM=MFREEZE
            DVBEF=DVBE
         ENDIF
         DVBE=DVBEF
      ENDIF
C
      RETURN
      END
C******************************************************************
      SUBROUTINE D2I
C******************************************************************
C*** * The initialization module for the Euler Module D2
C*** * Reserved C(3510) locations are 1700-1749
C*** * This module performs the following functions:
C*** *
C*** * 1) Defines the loc. of the state variables WBIB(3)
C*** * 2) Converts WBEB(3) to WBIB(3)
C*** *
C*** * MODIFICATION HISTORY
C*** * 990406 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
      DIMENSION  IPL(100),IPLV(100),WBEB(3),TBI(3,3),WBIB(3),WEII(3)
     &,WEIB(3)
C
C*** INPUT DATA INITIALIZATION
C
      EQUIVALENCE (C(1713),WBEB(1))
C
C WBEB(3) = I/G Geographic body rates - rad/s
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0320),TBI(1,1)) !<
C
C TBI= S Transf matrix of body wrt inertial axes - ND
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0058),WEII3)
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C*** INITIALIZATION OUTPUT
C
	EQUIVALENCE (C(1707),WBIB(1))
C
C***  Identifying of state variables for integration
C
      ILOC=1704
      DO I=0,2
         IPL(NIP)=ILOC+I
         IPLV(NIP)=ILOC+I+3
         NIP=NIP+1
      ENDDO
C
C*** Conversion of input WBEB(3) to WBIB(3)
C
	CALL VECVEC(WEII,0.,0.,WEII3)
	CALL MATMUL(WEIB,TBI,WEII,3,3,1)
	CALL MATADD(WBIB,WBEB,WEIB,3,1)
C
      RETURN
      END
C*******************************************************************
      SUBROUTINE D2
C*******************************************************************
C*** * Euler Module
C*** * Reserved C(3510) locations are 1700-1749
C*** * This module performs the following functions:
C*** *
C*** * 1) Solves Euler equations to obtain inertial body rates
C*** * 2) Converts inertial to geographic body rates
C*** *
C*** * MODIFICATION HISTORY
C*** * 990406 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
      DIMENSION TBI(3,3),AIB(3,3),FMB(3),WBEB(3),WBIBD(3),WBIB(3)
     &,DUM33(3,3),DUM3(3),DUMM3(3),AIBI(3,3),WEII(3),WEIB(3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0058),WEII3)
      EQUIVALENCE (C(2000),T)
C
C*** INITIALIZATION
C
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0320),TBI(1,1)) !<
      EQUIVALENCE (C(1338),AIB(1,1))
      EQUIVALENCE (C(1413),FMB(1))
C
C TBI= S Transf matrix of body wrt inertial axes - ND
C AIB= O Moment of inertia matrix - kgm^2
C FMB= O Aerodynamic and propulsive moments in body axes - N*m
C
C*** STATE VARIABLES
C
	EQUIVALENCE (C(1704),WBIBD(1))
	EQUIVALENCE (C(1707),WBIB(1))
C
C WBIB(3) = S Angular velocity of vehicle wrt inertial frame - rad/s
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1710),PPX)
      EQUIVALENCE (C(1711),QQX)
      EQUIVALENCE (C(1712),RRX)
      EQUIVALENCE (C(1713),WBEB(1))
C
C PPX = O Inertial body roll rate - deg/s
C QQX = O Inertial body pitch rate - deg/s
C RRX = O Inertial body yaw rate - deg/s
C WBEB(3) = I/G Geographic body rates - rad/s
C
C*** DIAGNOSTICS
C
C
C*** Integration of inertial angular velocities
C
	CALL MATSKS(DUM33,WBIB)
	CALL MATMUL(DUM3,AIB,WBIB,3,3,1)
	CALL MATMUL(DUMM3,DUM33,DUM3,3,3,1)
	CALL MATSUB(DUM3,FMB,DUMM3,3,1)
	CALL MATINV(AIBI,AIB,DET,3)
C	CALL DMATINV(AIBI,AIB,3)
	CALL MATMUL(WBIBD,AIBI,DUM3,3,3,1)
C
C*** Conversion to geographic angular velocity
C
	CALL VECVEC(WEII,0.,0.,WEII3)
	CALL MATMUL(WEIB,TBI,WEII,3,3,1)
	CALL MATSUB(WBEB,WBIB,WEIB,3,1)
C
      PPX=WBIB(1)*CRAD
      QQX=WBIB(2)*CRAD
      RRX=WBIB(3)*CRAD
C
      RETURN
      END
C***********************************************************************
      SUBROUTINE G2I
C***********************************************************************
C*** * Atmosphere and Wind Initialization
C*** * Reserved C(3510) locations are 200-299
C*** *
C*** * This module performs the following functions:
C*** * (1) Initializes state variables
C*** * (2) Calls modules D1I and G2 so that atmospheric variables are
C*** *     available for other initialization modules
C*** *
C*** * The switch MAIR controls the atmosphere, wind and gust options:
C*** *
C*** *   MAIR=|MTURB|MWIND|MATMO|
C*** *
C*** *         MTURB =0 No turbulence
C*** *			   =1 Dryden turbulence model
C*** *               MWIND =0 No Wind
C*** *                     =1 Constant Wind, Input: DVAEG,PSIWGX
C*** *    	   	         =2 Shear Wind, Input: WALTL,DVAEGL;WALTH,DVAEGH;PSIWGX
C*** * 	           	     =3 Tabular Wind, Input: Weather deck from INPUT.ASC
C*** *					 MATMO =0 Std. Atmosphere, ARDC atmosphere internal	
C*** *   	                       =3 Tabular Atmosph, Input: Weather deck from IN
C*** *
C*** * MODIFICATION HISTORY:
C*** * 990415 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
      DIMENSION IPL(100),IPLV(100)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0200),MAIR)
C
C*** INPUTS FROM OTHER MODULES
C
	EQUIVALENCE (C(1604),DVBE)
C
C*** INPUTS FROM EXECUTIVE
C
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C*** INITIALIZATION
C
      EQUIVALENCE (C(0253),QN)
      EQUIVALENCE (C(0219),DVBA)
C
      MTURB=INT(MAIR/100.)
      MWIND=INT((MAIR-MTURB*100)/10.)
      MATMO=MAIR-MTURB*100-MWIND*10
C
C*** INITIALIZE STATE VARIABLES
C
	IF(MWIND.GT.0)THEN
		ILOC=239
		DO I=0,2
		   IPL(NIP)=ILOC+I
		   IPLV(NIP)=ILOC+I+3
		   NIP=NIP+1
		ENDDO
	ENDIF
	IF(MTURB.EQ.1)THEN
		IPL(NIP)=260
	    IPLV(NIP)=261
		NIP=NIP+1
		IPL(NIP)=262
	    IPLV(NIP)=263
		NIP=NIP+1
	ENDIF
C
C*** INITIALIZE DVBA BY GEOGRAPHIC SPEED
C
	DVBA=DVBE
C
C*** INITIALIZE HEATING VARIABLE
C
      QN=0.
C
      CALL D1I
CC      CALL G2
 
      RETURN
      END
C***********************************************************************
      SUBROUTINE G2
C***********************************************************************
C*** * Atmosphere and Wind
C*** * Reserved C(3510) locations are 200-299
C*** *
C*** * This module performs the following functions:
C*** * (1) This Module supplies the atmospheric data: density, DRHO, speed of
C*** * sound, VSOUND, atmospheric pressure, PPRES, temprature, RTEMP; and
C*** * vehicle related data: dynamic pressure, PDYNMC, Mach number, VMACH,
C*** * vehicle air speed, DVBA, corrected for wind VAEG.
C*** *
C*** * The switch MAIR controls the atmosphere, wind and gust options:
C*** *
C*** *   MAIR=|MTURB|MWIND|MATMO|
C*** *
C*** *         MTURB =0 No turbulence
C*** *			   =1 Dryden turbulence model
C*** *               MWIND =0 No Wind
C*** *                     =1 Constant Wind, Input: DVAEG,PSIWGX
C*** *    	   	         =2 Shear Wind, Input: WALTL,DVAEGL;WALTH,DVAEGH;PSIWGX
C*** * 	           	     =3 Tabular Wind, Input: Weather deck from INPUT.ASC
C*** *					 MATMO =0 Std. Atmosphere, ARDC atmosphere internal	
C*** *   	                       =3 Tabular Atmosph, Input: Weather deck from IN
C*** *
C*** *
C*** * *Constant horizontal wind is input by DVAEG and wind direction PSIWGX
C*** * *Shear wind is provided through low altitude input WALTL, DVAEGL
C*** *  and high altitude input WALTH, DVAEGH with fixed wind angle PSIWGX.
C*** * *Vertical component is provided by DVAE3 (down pos) for all wind options
C*** * *Tabular atmosphere and horizontal wind is read in from INPUT.ASC Weather
C*** *  and stored in COMMOM /WINDS/
C*** *  (OPTMET=1 required, SI units)
C*** * *Weatherdeck format for INPUT.ASC
C*** *  WEATHER
C*** *   WALT WDIR WVEL RHX CTMP WPRES
C*** *    >>> numerical entries up to 50 records <<<
C*** *  END
C*** * *Labeled COMMOM /WINDS/
C*** *  WALT= Altitude - m
C*** *  WDIR= Wind Direction (from North) - deg
C*** *  WVEL= Wind Velocity - m/s
C*** *  RHX= Air density - kg/m^3
C*** *  CTMP= Temprature - deg C
C*** *  WPRES= Atmospheric pressure - Pa
C*** *  KOUNTW= Number of altitude records
C*** *  RHW= Last altitude record
C*** * *Effect of wind is smoothed by a filter with 0.5 sec time constant
C*** *
C*** * (2)Heat equilibrium calculations on nose of vehicle
C*** *
C*** * (3)Gravitational acceleration based on WGS84 ellipsoid
C*** *
C*** * MODIFICATION HISTORY:
C*** * 990415 Created by Peter H Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
      COMMON /ARDC/ ALT,PRES,RHQ,TEMP,VS
      COMMON /WINDS/WALT(50),WDIR(50),WVEL(50),RHX(50),
     &              CTMP(50),WPRES(50),KOUNTW,RHW
C
      DIMENSION VAEG(3),VAESGD(3),VAESG(3),DUM3(3),VBAG(3),VBEG(3)
     &,GRAVG(3),VTAG(3),VTAEG(3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0200),MAIR)
      EQUIVALENCE (C(0204),PSIWGX)
      EQUIVALENCE (C(0208),DVAE3)
      EQUIVALENCE (C(0209),DVAEG)
      EQUIVALENCE (C(0214),DVAEGL)
      EQUIVALENCE (C(0215),DVAEGH)
      EQUIVALENCE (C(0216),WALTL)
      EQUIVALENCE (C(0217),WALTH)
      EQUIVALENCE (C(0251),RN)
      EQUIVALENCE (C(0257),FLAGQN)
C
C MAIR = D = |MTURB|MWIND|MATMO|, see Module G2
C PSIWGX = D Wind direction from north - deg
C DVAE3 = D Vertical Wind, pos. down - m/s
C DVAEG = D Constant wind magnitude - m/s
C DVAEGL = D Wind at low altitude - m/s
C DVAEGH = D Wind at high altitude - m/s
C WALTL = D Altitude of DVAELL - m
C WALTH = D Altitude of DVAELH - m
C RN = D Radius of nose (if =0, no heat flux calc) - m
C FLAGQN = D =1:restart heat integration
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(2000),T)
      EQUIVALENCE (C(2664),DER)
      EQUIVALENCE (C(2866),ICOOR)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(1215),TRQN)
      EQUIVALENCE (C(1216),TRQNDOT)
      EQUIVALENCE (C(1280),TRCODE)
      EQUIVALENCE (C(1283),TRMACH)
      EQUIVALENCE (C(1649),VBEG(1))
      EQUIVALENCE (C(1669),BALT)
C
C TRCODE= I Termination code number
C TRMACH= D Minimum Mach number
C VBEG= O Vehicle's velocity wrt earth in geographic axes - m/s
C BALT= D/G Vehicle altitude = m
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(0201),VAEG(1))
      EQUIVALENCE (C(0205),DRHO)
      EQUIVALENCE (C(0206),VSOUND)
      EQUIVALENCE (C(0212),PPRES)
      EQUIVALENCE (C(0213),RTEMP)
      EQUIVALENCE (C(0219),DVBA)
      EQUIVALENCE (C(0220),PDYNMC)
      EQUIVALENCE (C(0221),VMACH)
      EQUIVALENCE (C(0223),GRAVG(1))
C
C VAEG(3) = O Vel of air wrt earth in geographic axes - m/s
C DRHO = O Air density - kg/m3
C VSOUND = O Sonic speed - m/s
C PPRES = O Atmospheric pressure - Pa
C RTEMP = O Atmospheric temperature - C
C DVBA = O Speed of vehicle wrt air mass - m/s
C PDYNMC = O Dynamic pressure - Pa
C VMACH = O Vehicle Mach number based on DVBA
C GRAVG(3) = O Gravitational acceleration in geogr axes - m/s2
C GRAVI(3) = O Gravitational acceleration in inertial axes - m/s2
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(0239),VAESGD(1))
      EQUIVALENCE (C(0242),VAESG(1))
C
C VAESG = S Airmass velocity wrt earth in geographic coor - m/s
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0218),DVW)
      EQUIVALENCE (C(0252),QNDOT)
      EQUIVALENCE (C(0253),QN)
      EQUIVALENCE (C(0254),QNDMAX)
      EQUIVALENCE (C(0255),QNDTIM)
      EQUIVALENCE (C(0265),VTAG(1))
C
C DVW = G Wind magnitude interpoated - m/s
C QNDOT = G Equilibrium heat rate at nose - (MJ/m2)/s
C QN = G Equilibrium heat at nose - MJ/m2
C QNDMAX = G Max equilibrium heat rate at nose - (MJ/m2)/s
C QNDTIM = G Time of max equil heat rate - s
C VTAG(3) = G Tubulence in geographic coorcinates - m/s
C
      PARAMETER (R=287.053)
C
C R =Gas constant - m^2/(K*sec^2
C
      MTURB=INT(MAIR/100.)
      MWIND=INT((MAIR-MTURB*100)/10.)
      MATMO=MAIR-MTURB*100-MWIND*10
C
C*** EARTH GRAVITATIONAL ACCELERATION
C
      CALL G2GRAV(GRAVG)
C
C*** SELECTION OF ATMOSPHERIC OPTIONS
C
      IF(MATMO.EQ.0) THEN
C
C*** STANDARD ATMOSPHERE
C
         ALT = BALT
         CALL ARDCMM
         TEMP=TEMP-273.
         VSOUND=VS
         DRHO=RHQ
         RTEMP=TEMP
         PPRES=PRES
      ENDIF
C
      IF(MATMO.EQ.3) THEN
C
C*** ATMOSPHERE FROM TYPE 8 INPUTS
C
         CALL TABLE(BALT,WALT,RHX,KOUNTW,DRHO)
         CALL TABLE(BALT,WALT,CTMP,KOUNTW,CTEMP)
         CALL TABLE(BALT,WALT,WPRES,KOUNTW,PPRES)
	   TEMPK=CTEMP+273.16
         VSOUND=SQRT(1.4*R*TEMPK)
      ENDIF
C
C*** WIND OPTIONS
C
      IF(MWIND.GT.0) THEN
C
         IF(MWIND.EQ.1) THEN
C
C***     CONSTANT WIND
C
            DVW=DVAEG
         ENDIF
C
         IF(MWIND.EQ.2) THEN
C
C***        WIND WITH CONSTANT SHEAR
C
            DVW=DVAEGL+(DVAEGH-DVAEGL)*(BALT-WALTL)/(WALTH-WALTL)
            IF(BALT.LT.WALTL) DVW=0.
            IF(BALT.GT.WALTH) DVW=0.
         ENDIF
C
         IF(MWIND.EQ.3) THEN
C
C***     WIND FROM TYPE 8 INPUTS
C
            CALL TABLE(BALT,WALT,WDIR,KOUNTW,PSIWGX)
            CALL TABLE(BALT,WALT,WVEL,KOUNTW,DVW)
         ENDIF
C
C***     WIND COMPONENTS
C
         VAEG(1)=-DVW*COS(PSIWGX/CRAD)
         VAEG(2)=-DVW*SIN(PSIWGX/CRAD)
         VAEG(3)=DVAE3
C
C***     SMOOTHING WIND BY FILTER WITH TIME CONSTANT .1 SEC
C
	   CALL MATSUB(DUM3,VAEG,VAESG,3,1)
	   CALL MATCON(VAESGD,2.,DUM3,3,1)
	   CALL MATEQL(VTAEG,VAESG,3,1)
       ENDIF
C
C*** WIND TURBULENCE IN NORMAL LOAD PLANE
C
	IF(MTURB.EQ.1)THEN
	   CALL G2TURB(VTAG,DVBA)
	   CALL MATADD(VTAEG,VTAG,VAESG,3,1)
	ENDIF
C
C*** FLIGHT CONDITIONS
C
      CALL MATSUB(VBAG,VBEG,VTAEG,3,1)
      CALL MATABS(DVBA,VBAG,3)
      PDYNMC=0.5*DRHO*DVBA*DVBA
C
      IF(VSOUND.LE.1.E-10) THEN
        VMACH=0.
      ELSE
        VMACH=DVBA/VSOUND
        IF(VMACH.LT.TRMACH)TRCOND=2.
      END IF
C
C*** HEAT EQUILIBRIUM BETWEEN INPUT CONVECTING AND OUTPUT RADIATIVE
C    HEATING. HEAT RATE QDOT [(MJ/M2)/S] CALCULATED FROM NOSE RADIUS
C    RN [M], DENSITY DRHO [KG/M3], AND VELOCITY DVBA [M/S]. TO RE-
C    INITIALIZE THE HEAT INTEGRATION (FOR A NEW STAGE) SET FLAGQN=1.
C
      IF(RN.GT.0) THEN
         QNDOT=1.584E-10*(DRHO/RN)**.5*DVBA**3.15
         IF(QNDOT.GT.QNDMAX) THEN
            QNDMAX=QNDOT
            QNDTIM=T
         ENDIF
         IF(FLAGQN.GT..5)QN=0.
         FLAGQN=0.
         IF(ICOOR.EQ.1)QN=QN+QNDOT*DER
         IF(QN.GT.TRQN)TRCOND=3
         IF(QNDOT.GT.TRQNDOT)TRCOND=4
      ENDIF
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE G2GRAV(GRAVG)
C**********************************************************************
C*** * Earth Gravitational Acceleration, using the WGS 84 ellipsoid
C*** * Ref: Chatfield, A.B.,"Fundamentals of High Accuracy Inertial
C*** * Navigation",p.10, Prog.Astro and Aeronautics, Vol 174, AIAA, 1997.
C*** *
C*** * Argument Output:
C*** *          GRAVG(3) =Grav acceleration in geographic axes - m/s^2
C*** *
C*** * MODIFICATION HISTORY
C*** * 990413 Created by Peter Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
      DIMENSION SBII(3),GRAVG(3)
C
C*** INPUT FORM OTHER MODULES
C
      EQUIVALENCE (C(1605),ALON0)
      EQUIVALENCE (C(1619),SBII(1))
      EQUIVALENCE (C(1671),DBI)
C
C*** WGS 84 Paramters
C
	PARAMETER(GM = 3.986005E+14)
	PARAMETER(C20 = -4.8416685E-4)
	PARAMETER(AEL = 6378137.)
C
C GM =Universal gravitational constant x mass of earth - m^3/s^2
C C20 =Second degree zonal gravitational coefficient - ND
C AEL =Major axis of earth's gravitational potential ellipsoid - m
C
C*** Gravitational acceleration in geographic (geocentric) coordinates
C    Equation 1.22, p.10
C    (if C20=0.,GRAVG(3x1) is gravitational acceleration of spherical earth)
C
	CALL CADSPH(BLONG,BLATG,BALTG,SBII,ALON0)
      DUM1=GM/DBI**2
	DUM2=3.*SQRT(5.)
	DUM3=(AEL/DBI)**2
	GRAVG(1)=-DUM1*DUM2*C20*DUM3*SIN(BLATG)*COS(BLATG)
	GRAVG(2)=0.
	GRAVG(3)=DUM1*(1.+DUM2/2.*C20*DUM3*(3.*(SIN(BLATG))**2-1.))
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE ARDCMM
C**********************************************************************
C*** * ARDC 1959 Std Atmosphere, in SI units
C*** *
C*** * Output Labeled COMMON/ARDC/
C*** *		PRES=Static pressure - Pa
C*** *		RHO=Air density - kg/m^3
C*** *		TEM=Temperature - deg K
C*** *		VA=Sonic speed - m/s
C*** * Input Labeled COMMON/ARDC/
C*** *		YY=Geographic altitude - m
C*** *
C*** * MODIFICATION HISTORY
C*** * 780000 Eglin AFB Standard
C*** *
C**********************************************************************
C
      COMMON/ARDC/YY,PRES,RHO,TEM,VA
      DIMENSION BY(23),DTH(22),QTMB(22),BTEM(23),BPRES(23)
      DIMENSION TMW(14)
      DATA R,BY,DTH,QTMB,BTEM,BPRES/20855531.,0.,36089.,65617.,104987.,1
     154199.,170604.,200131.,259186.,291152.,295276.,328084.,360892.,393
     2701.,492126.,524934.,557743.,623360.,754593.,984252.,1312336.,1640
     1420.,1968504.,2296588.,-.19812E-02,.0,.3048E-03,.85344E-03,.0,-.60
     196E-03,-.12192E-02,.0,.0,.9144E-03,.1524E-02,.3048E-02,.6096E-02,.
     14572E-02,.3048E-02,.21336E-02,.1524E-02,.12192E-02,.100584E-02,.79
     1248E-03,.51816E-03,.33528E-03,                                   -
     55.2558761,-.00015768841,34.163195,12.201141,-.00012622647,-17.0815
     697,-8.5407987,-.00018911262,-.00018911262,11.387732,6.8326390,3.41
     763195,1.7081597,2.2775463,3.4163195,4.8804564,6.8326390,8.5407987,
     810.352483,13.13969,20.095997,31.057450,288.15,216.65,216.65,228.65
     9,270.65,270.65,252.65,180.65,180.65,180.65,210.65,260.65,360.65,96
     10.65,1110.65,1210.65,1350.65,1550.65,1830.65,2160.65,2420.65,2590.
     165,2700.65,14.695972,3.2825087,.79406678,.12589565,.016085624,.855
     173762E-02,.26411526E-02,.15050764E-03,.23842975E-04,.18798462E-04,
     1.32680828E-05,.76260471E-06,.25147919E-06,.47175393E-07,.33900235E
     1-07,.25251720E-07,.14803047E-07,.57622378E-08,.13959564E-08,.25102
     1062E-09,.56402386E-10,.14418928E-10,.39632286E-11/
      DATA TMW/28.9644,28.88,28.56,28.07,26.92,26.66,26.40,25.85,24.70,2
     12.66,19.94,17.94,16.84,16.17/
C
C   CONVERT H FROM METERS TO FEET
C
      Y = YY/.3048
      IF(Y-295276.)5,10,10
    5 ALT=Y/(1.+Y/R)
      GO TO 15
   10 ALT=Y
   15 DO 20 I=1,23
      IF(ALT-BY(I))25,20,20
   20 CONTINUE
      RHO=0.
      VA=0.
      PRES=0.
      TEM=0.
      RETURN
   25 IF(ALT-295276.)27,27,26
   26 IF(I-11)32,32,31
   31 J=I-1
      GO TO 33
   32 J=I
   33 X0STR=BY(J-1)
      X1STR=BY(J)
      X2STR=BY(J+1)
      Y0STR=TMW(J-10)
      Y1STR=TMW(J-9)
      Y2STR=TMW(J-8)
      COF1=(X2STR-ALT)/(X1STR-X0STR)*((X1STR-ALT)/(X2STR-X0STR))
      COF2=(X0STR-ALT)/(X0STR-X1STR)*((X2STR-ALT)/(X2STR-X1STR))
      COF3=(X0STR-ALT)/(X0STR-X2STR)*((X1STR-ALT)/(X1STR-X2STR))
      WT=COF1*Y0STR+COF2*Y1STR+COF3*Y2STR
      GO TO 29
   27 WT=28.9644
   29 IF(I-11)30,50,50
   30 GO TO (40,50,70,50,50,70,50,50,70,70),I
   50 TEM=BTEM(I-1)+DTH(I-1)*(ALT-BY(I-1))
      PRES=BPRES(I-1)*(BTEM(I-1)/TEM)**QTMB(I-1)
   60 TEM=TEM*1.8
      VA=(49.0221958+.571E-07)*SQRT(TEM)
      RHO=PRES/TEM*(.0838899+.78E-07)
      TEM=(WT*TEM)/28.9644
C
C  CONVERT PRESSURE (PRES) FROM LBS/SQ IN TO PASCALS
C  CONVERT VELOCITY OF SOUND (VA) FROM FT/SEC TO M/SEC
C  CONVERT TEMPERATURE (TEM) FROM DEG RANKINE TO DEG KELVIN
C  CONVERT DENSITY (RHO) FROM SLUGS/CUBIC FT TO KG/CUBIC METER
C
      PRES = PRES*6894.757
      VA = VA*.3048
      TEM = TEM/1.8
      RHO = RHO*515.3788
      RETURN
   70 PRES=BPRES(I-1)*(2.7182818+.285E-07)**((ALT-BY(I-1))*QTMB(I-1)*.30
     148)
      TEM=BTEM(I-1)
      GO TO 60
   40 TEM=BTEM(1)+DTH(1)*ALT
      PRES=BPRES(1)*(BTEM(1)/TEM)**QTMB(1)
      GO TO 60
      END
C**********************************************************************
      SUBROUTINE G2TURB(VTAG,DVBA)
C**********************************************************************
C*** * Dryden turbulence model
C*** * Ref: Etkin, Dynamics of Flight,Wiley 1958, p.318
C*** * Argument Output:
C*** *          VTAG(3)=Velocity of turbulence wrt steady air mass - m/s
C*** * Argument Input:
C*** *          DVBA=Vehicle speed wrt air mass - m/s
C*** *
C*** * MODIFICATION HISTORY
C*** * 000120 Created by Peter Zipfel
C*** *
C**********************************************************************
C
      COMMON C(3510)
C
      DIMENSION VTAA(3),TBG(3,3),TAB(3,3),TGA(3,3),TAG(3,3),VTAG(3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0258),TURBL)
      EQUIVALENCE (C(0259),TURBSIG)
C
C TURBL = D Turbulence correlation length - m
C TURBSIG = D Turbulence magnitude (1sigma) - m/s
C
C*** INPUT FORM EXECUTIVE
C
      EQUIVALENCE (C(2664),DER)
C
C*** INPUT FORM OTHER MODULES
C
      EQUIVALENCE (C(0342),ALPP)
      EQUIVALENCE (C(0343),PHIP)
      EQUIVALENCE (C(0350),TBG(1,1))
      EQUIVALENCE (C(1671),DBI)
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(0260),TAUX1D)
      EQUIVALENCE (C(0261),TAUX1)
      EQUIVALENCE (C(0262),TAUX2D)
      EQUIVALENCE (C(0263),TAUX2)
C
C TAUX1 = S First turbulence state variable - ND
C TAUX2 = S Second turbulence state variable - ND
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0264),TAU)
      EQUIVALENCE (C(0268),GAUSS)
C
C TAU = G Turbulence component in load factor plane - m/s
C GAUSS = G White Gaussian time series - ND
C
      DATA ISEED1/19283/,ISEED2/24579/
      PARAMETER(PI=3.1416)
C
C*** White Gaussian noise with zero mean
C
      V1=RAN(ISEED1)
      V2=RAN(ISEED2)
      GAUSS=(1./SQRT(DER))*SQRT(2.*ALOG(1./V1))*COS(2.*PI*V2)
C
C*** Filter converting white gaussian noise into time sequence of Dryden
C    turbulence TAU (One-dimensional cross-velocity Dryden spectrum)
C
      VL=DVBA/TURBL
      VL2=VL**2
      DUM1=SQRT(1./(PI*VL))
      DUM2=(1./VL)*SQRT(3./(PI*VL))
      TAUX1D=TAUX2
      TAUX2D=-VL2*TAUX1-2*VL*TAUX2+VL2*GAUSS
      TAU=TURBSIG*(DUM1*TAUX1+DUM2*TAUX2)
C
C*** TAU inserted into the load factor plane (aeroballistic 1A-3A plane)
C
      CALL VECVEC(VTAA,0.,0.,TAU)
C
C*** TM of aerballistic wrt body coordinates
C
      COSA=COS(ALPP)
      SINA=SIN(ALPP)
      COSP=COS(PHIP)
      SINP=SIN(PHIP)
      TAB(1,1)=COSA
      TAB(1,2)=SINA*SINP
      TAB(1,3)=SINA*COSP
      TAB(2,1)=0.
      TAB(2,2)=COSP
      TAB(2,3)=-SINP
      TAB(3,1)=-SINA
      TAB(3,2)=COSA*SINP
      TAB(3,3)=COSA*COSP
C
C*** Converting turbulence to geographic coordinates
C
      CALL MATMUL(TAG,TAB,TBG,3,3,3)
	CALL MATTRA(TGA,TAG,3,3)
      CALL MATMUL(VTAG,TGA,VTAA,3,3,1)
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE G3I
C**********************************************************************
C*** * Initialization module for the Kinematic Module G3.
C*** * Reserved C(3510) locations are 300-399
C*** * This module performs the following functions:
C*** *
C*** * (1) Initializes inertial base vectors as state variables
C*** * (2) Initializes the direction cosine matrix TBI(3x3)
C*** * (3) Initializes incidence angles
C*** *
C*** * MODIFICATION HISTORY
C*** * 990407 Created by Peter Zipfel
C*** *
C*** ******************************************************************
C
      COMMON C(3510)
C
      DIMENSION IPL(100),IPLV(100)
     &,TVG(3,3),TGV(3,3),TGI(3,3),TBI(3,3),TBG(3,3)
CC     &,DUM3(3),VBEB(3),VBEG(3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0337),PSIBGX)
      EQUIVALENCE (C(0338),THTBGX)
      EQUIVALENCE (C(0339),PHIBGX)
C
C*** INPUT DATA DEFINED IN MODULE D1
C
      EQUIVALENCE (C(1602),PSIVGX)
      EQUIVALENCE (C(1603),THTVGX)
      EQUIVALENCE (C(1604),DVBE)
      EQUIVALENCE (C(1605),ALON0)
      EQUIVALENCE (C(1606),ALPHA0X)
      EQUIVALENCE (C(1607),BETA0X)
      EQUIVALENCE (C(1640),BLONX)
      EQUIVALENCE (C(1641),BLATX)
      EQUIVALENCE (C(1669),BALT)
C
C PSIVGX = I Heading angle from north - deg
C THTVGX = I Flight path angle from horizontal - deg
C DVBE = I/G Geographic speed - m/s
C ALON0 = I Greenwich siderial hour angle - rad
C ALPHA0X = D Initial angle-of-attack - deg
C BETA0X = D Initial side slip angle - deg
C BLONX = I/G Vehicle longitude - deg
C BLATX = I/G Vehicle latitude - deg
C BALT = D/G Vehicle altitude = m
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0051),REARTH)
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0058),WEII3)
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C*** INITIALIZATION OUTPUT
C
      EQUIVALENCE (C(0320),TBI(1,1))
      EQUIVALENCE (C(0340),ALPPX)
      EQUIVALENCE (C(0341),PHIPX)
      EQUIVALENCE (C(0342),ALPP)
      EQUIVALENCE (C(0343),PHIP)
      EQUIVALENCE (C(0344),ALPHAX)
      EQUIVALENCE (C(0345),BETAX)
	EQUIVALENCE (C(0346),ALPHA)
	EQUIVALENCE (C(0347),BETA)
	EQUIVALENCE (C(0350),TBG(1,1))
C
C***  Identifying of state variables for integration
C
      ILOC=311
      DO I=0,8
         IPL(NIP)=ILOC+I
         IPLV(NIP)=ILOC+I+9
         NIP=NIP+1
      ENDDO
C
C*** Calculate TVG(3x3)
C
      CALL MAT2TR(TVG,PSIVGX/CRAD,THTVGX/CRAD) !? NEEDED?
      CALL MATTRA(TGV,TVG,3,3) !? NEEDED?
CC
C*** Initialization of TBI(3x3)
C
      CALL MAT3TR(TBG,PSIBGX/CRAD,THTBGX/CRAD,PHIBGX/CRAD)
	CALL CADTGI84(TGI,BLONX/CRAD,BLATX/CRAD,BALT,ALON0)
	CALL MATMUL(TBI,TBG,TGI,3,3,3)
C
C*** Initialization of Incidence angles
C
C99      CALL MATCAR(VBEG,DVBE,PSIVGX/CRAD,THTVGX/CRAD)
C99	   CALL MATMUL(VBEB,TBG,VBEG,3,3,1)
C99      ALPHA=ATAN2(VBEB(3),VBEB(1))
C99      BETA=ASIN(VBEB(2)/DVBE)
C99      DUM=VBEB(1)/DVBE
C99      IF(ABS(DUM).GE.1.) DUM=SIGN(1.,DUM)
C99      ALPP=ACOS(DUM)
C99      IF(VBEB(2).EQ.0..AND.VBEB(3).EQ.0.)THEN
C99         PHIP=0.
C99      ELSE
C99         PHIP=ATAN2(VBEB(2),VBEB(3))
C99      ENDIF
C
C99      ALPHAX=ALPHA*CRAD
C99      BETAX=BETA*CRAD
C99      ALPPX=ALPP*CRAD
C99      PHIPX=PHIP*CRAD
C
	ALPHAX=ALPHA0X
	BETAX=BETA0X
C
      RETURN
      END
C**********************************************************************
      SUBROUTINE G3
C**********************************************************************
C*** * Kinematic Module
C*** * Reserved C(3510) locations are 300-399
C*** * This module performs the following functions:
C*** *
C*** * (1) Solves the direction cosine differential equations
C*** * (2) Calculates Euler angles wrt geographic frame
C*** * (2) Calculates incidence angles
C*** *
C*** * MODIFICATION HISTORY
C*** * 990407 Created by Peter Zipfel
C*** *
C*** ******************************************************************
C
      COMMON C(3510)
C
      DIMENSION DUM33(3,3),WBIB(3),TBID(3,3)
     &,TBI(3,3),TIB(3,3),DUM3(3),DUMM33(3,3),TGI(3,3),TIG(3,3)
     &,VBEB(3),VBEG(3),TBG(3,3),EE(3,3),VBAG(3),VAEG(3)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(2000),T)
      EQUIVALENCE (C(2866),ICOOR)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0201),VAEG(1))
      EQUIVALENCE (C(1280),TRCODE)
      EQUIVALENCE (C(1286),TRALP)
	EQUIVALENCE (C(1631),TGI(1,1))
      EQUIVALENCE (C(1649),VBEG(1))
	EQUIVALENCE (C(1707),WBIB(1))
C
C VAEG= O Vel of air wrt earth in geographic axes - m/s
C TRCODE= I Termination code number
C TRALP= D Maximum total angle of attack - rad
C TGI= I TM	of geographic wrt inertial coordinates - ND	
C VBEG= O Vehicle's velocity wrt earth in geographic axes - m/s
C WBIB= S Angular velocity of vehicle wrt inertial frame - rad/
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(0311),TBID(1,1))
      EQUIVALENCE (C(0320),TBI(1,1))
C
C TBI(3,3) = S Transf matrix of body wrt inertial axes - ND
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(0339),PHIBGX)
      EQUIVALENCE (C(0340),ALPPX)
      EQUIVALENCE (C(0341),PHIPX)
      EQUIVALENCE (C(0342),ALPP)
      EQUIVALENCE (C(0343),PHIP)
      EQUIVALENCE (C(0344),ALPHAX)
      EQUIVALENCE (C(0345),BETAX)
	EQUIVALENCE (C(0346),ALPHA)
	EQUIVALENCE (C(0347),BETA)
	EQUIVALENCE (C(0360),VBEB(1))
C
C PHIBGX = I/G Rolling angle of vehicle - deg
C ALPPX = O Total angle of attack - deg
C PHIPX = O Aerodynamic roll angle - deg
C ALPP = O Total angle of attack - rad
C PHIP = O Aerodynamic roll angle - rad
C ALPHAX = G Angle of attack - deg
C BETAX = G Side slip angle - deg
C ALPHA = G Angle of attack - rad
C BETA = G Side slip angle - rad
C VBEB(3) = O Geographic vehicle velocity in body coord - m/s
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0334),PSIBG)
      EQUIVALENCE (C(0335),THTBG)
      EQUIVALENCE (C(0336),PHIBG)
      EQUIVALENCE (C(0337),PSIBGX)
      EQUIVALENCE (C(0338),THTBGX)
      EQUIVALENCE (C(0348),ENORM)
	EQUIVALENCE (C(0350),TBG(1,1))
C
C PSIBG = G Yawing angle of vehicle - rad
C THTBG = G Pitching angle of vehicle - rad
C PHIBG = G Rolling angle of vehicle - rad
C PSIBGX = I/G Yawing angle of vehicle - deg
C THTBGX = I/G Pitching angle of vehicle - deg
C ENORM = G Norm of nonorthogonal error matrix - ND
C TBG(3,3) = I/G	TM of body wrt geographic coordinates - ND
C
C*** Merging of base vectors into direction cosine matrix
C
C*** Maintaining orthonormality. (Code must be placed before integration
C    procedure, because actual integration by AMRK takes place only ofter
C    all Modules have been called)
C
	IF(ICOOR.EQ.1)THEN
		CALL MATUNI(EE,3)
		CALL MATTRA(TIB,TBI,3,3)
		CALL MATMUL(DUM33,TBI,TIB,3,3,3)
		CALL MATSUB(DUMM33,EE,DUM33,3,3)
		CALL MATVDI(DUM3,DUMM33,3)
		CALL MATABS(ENORM,DUM3,3)
		CALL MATMUL(DUM33,DUMM33,TBI,3,3,3)
		CALL MATCON(DUMM33,.5,DUM33,3,3)
		CALL MATADD(DUM33,TBI,DUMM33,3,3)
		CALL MATEQL(TBI,DUM33,3,3)
	ENDIF
C
C*** Integration of inertial base vectors to obtain TBI(3x3)
C
	CALL MATSKS(DUM33,WBIB)
	CALL MATTRA(DUMM33,DUM33,3,3)
	CALL MATMUL(TBID,DUMM33,TBI,3,3,3)
C
C*** Euler Angles
C
	CALL MATTRA(TIG,TGI,3,3)
      CALL MATMUL(TBG,TBI,TIG,3,3,3)
	IF(ABS(TBG(1,3)).LT.1.) THTBG=ASIN(-TBG(1,3))
      CTHTBG=COS(THTBG)
      DUM1=TBG(1,1)/CTHTBG
      DUM2=TBG(3,3)/CTHTBG
      IF(ABS(DUM1).LE.1.) PSIBG=ACOS(DUM1)*SIGN(1.,TBG(1,2))
      IF(ABS(DUM2).LE.1.) PHIBG=ACOS(DUM2)*SIGN(1.,TBG(2,3))
C
      PSIBGX=CRAD*PSIBG
      THTBGX=CRAD*THTBG
      PHIBGX=CRAD*PHIBG
C
C*** Incidence angles, wind input by VAEG(3)
C
	CALL MATSUB(VBAG,VBEG,VAEG,3,1)
	CALL MATMUL(VBEB,TBG,VBAG,3,3,1)
      ALPHA=ATAN2(VBEB(3),VBEB(1))
      CALL MATABS(DVBE,VBEB,3)
      BETA=ASIN(VBEB(2)/DVBE)
      DUM=VBEB(1)/DVBE
      IF(ABS(DUM).GE.1.) DUM=SIGN(1.,DUM)
      ALPP=ACOS(DUM)
      IF(VBEB(2).EQ.0..AND.VBEB(3).EQ.0.)THEN
         PHIP=0.
      ELSE
         PHIP=ATAN2(VBEB(2),VBEB(3))
      ENDIF
C
      ALPHAX=ALPHA*CRAD
      BETAX=BETA*CRAD
      ALPPX=ALPP*CRAD
      PHIPX=PHIP*CRAD
C
C*** Termination Conditions
C
      IF(ALPP.GT.TRALP) TRCODE=5.
C
      RETURN
      END
C******************************************************************
      SUBROUTINE C4I
C******************************************************************
C*** * Actuator Initialization Module
C*** * Reserved C(3510) locations are 900-999
C*** * This subroutine performs the following functions:
C*** * (1) MACT=0 No dynamics with position limiting
C*** *         =2 Second order dynamics with position and rate limiting
C*** *
C*** * (2) Initializes the state variables for second
C*** *     order actuator dynamics
C*** *
C*** * MODIFICATION HISTORY
C*** * 990719 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
      DIMENSION IPL(100),IPLV(100)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C NIP = E The number of variables being integrated
C IPL(100) = E The location of the state variable derivative
C IPLV(100) = E The location of the sate variable
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1100),MACT)
C
C MACT = D  =0:no dynamics, =2:second order
C
C*** Storage of state variable locations
C
      IF(MACT.EQ.2) THEN
		ILOC=1130
		DO J=1,6
		   IPL(NIP)=ILOC
	  	   IPLV(NIP)=ILOC+1
		   ILOC=ILOC+2
		   NIP=NIP+1
		ENDDO
      ENDIF
C
      RETURN
      END
C******************************************************************
      SUBROUTINE C4
C******************************************************************
C*** * Actuator Module
C*** * Reserved C(3510) locations are 900-999
C*** * This subroutine performs the following functions:
C*** *
C*** * (1) Converts from control deflections to fin deflections
C*** * (2) Calls actuator dynamic subroutine
C*** *     MACT=0 No dynamics with position limiting
C*** *         =2 Second order dynamics with position and rate limiting
C*** * (3) Limits fins excursions and converts back to control deflections
C*** *
C*** * MODIFICATION HISTORY
C*** * 990719 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1100),MACT)
      EQUIVALENCE (C(1102),DLIMX)
C
C MACT = D  =0:no dynamics, =2:second order
C DLIMVX = D Elevon fin limiter - deg
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0919),DELACX)
      EQUIVALENCE (C(0920),DELECX)
      EQUIVALENCE (C(0921),DELRCX)
C
C DELACX= O Aileron command - deg
C DELECX= O Elevator command - deg
C DELRCX= O Rudder command - deg
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(1119),DELAX)
      EQUIVALENCE (C(1120),DELEX)
      EQUIVALENCE (C(1121),DELRX)
C
C DELAX = O Aileron deflection - deg
C DELEX = O Elevator deflection - deg
C DELRX = O Rudder deflection - deg
C
C*** Conversion to elevon and rudder
C
	DELVLCX=DELECX+DELACX
	DELVRCX=DELECX-DELACX
C
C*** No actuator dynamics
C
      IF(MACT.EQ.0.) THEN
         DELVLX=DELVLCX
	   DELVRX=DELVRCX
	   DELRX=DELRCX
         IF(ABS(DELVLX).GT.DLIMX) DELVLX=SIGN(DLIMX,DELVLX)
         IF(ABS(DELVRX).GT.DLIMX) DELVRX=SIGN(DLIMX,DELVRX)
         IF(ABS(DELRX).GT.DLIMX) DELRX=SIGN(DLIMX,DELRX)
      ENDIF
C
C*** CALL SECOND ORDER ACTUATOR
C
      IF(MACT.EQ.2) THEN
	   CALL C4SCND(DELVLX,DELVRX,DELRX,DELVLCX,DELVRCX,DELRCX)
	ENDIF
C
C*** Conversion to three controls for aerodynamic tables
C
	DELEX=(DELVLX+DELVRX)/2.
	DELAX=(DELVLX-DELVRX)/2.	
C
      RETURN
      END
 
C******************************************************************
      SUBROUTINE C4SCND(DELVLX,DELVRX,DELRX,DELVLCX,DELVRCX,DELRCX)
C******************************************************************
C*** * Second Order Actuator Model
C*** * This subroutine performs the following functions:
C*** * (1) Models second order lags of all three control fins
C*** * (2) Limits fin positions
C*** * (3) Limits fin rates
C*** *
C*** * Argument Output:
C*** *          DELVLX= Left elevon fin deflection - deg
C*** *          DELVRX= Right elevon fin deflection - deg
C*** *          DELRX=  Rudder fin deflection - deg
C*** * Argument Input:
C*** *          DELVLCX= Left elevon command - deg
C*** *          DELVRCX= Right elevon command - deg
C*** *          DELRCX=  Rudder command - deg
C*** *
C*** * MODIFICATION HISTORY
C*** * 990719 Created by Peter Zipfel
C*** *
C*** **************************************************************
C
      COMMON C(3510)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(1102),DLIMX)
      EQUIVALENCE (C(1104),DDLIMX)
      EQUIVALENCE (C(1105),WNACT)
      EQUIVALENCE (C(1106),ZETACT)
C
C DLIMX = D Control fin limiter - deg
C DDLIMX = D Control fin rate limiter - deg/s
C WNACT = D Natural frequency of actuator - rad/s
C ZETACT = D Damping of actuator - ND
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(1130),DVRXD)
      EQUIVALENCE (C(1131),DVRX)
      EQUIVALENCE (C(1132),DDVRXD)
      EQUIVALENCE (C(1133),DDVRX)
      EQUIVALENCE (C(1134),DVLXD)
      EQUIVALENCE (C(1135),DVLX)
      EQUIVALENCE (C(1136),DDVLXD)
      EQUIVALENCE (C(1137),DDVLX)
      EQUIVALENCE (C(1138),DRXD)
      EQUIVALENCE (C(1139),DRX)
      EQUIVALENCE (C(1140),DDRXD)
      EQUIVALENCE (C(1141),DDRX)
C
C DVRX = S Right elevon deflection - deg
C DDVRX = S Right elevon deflection rate - deg
C DVLX = S Left elevon deflection - deg
C DDVLX = S Left elevon deflection rate - deg
C DRX = S Rudder deflection - deg
C DDRX = S Rudder deflection rate - deg
C
C*** Right elevon dynamics ***
C
C*** Fin position limiter
      IF(ABS(DVRX).GT.DLIMX) THEN
         DVRX=SIGN(DLIMX,DVRX)
         IF(DVRX*DDVRX.GT.0.) DDVRX=0.
      ENDIF
C*** Fin rate limiter
      IFLAG=0
      IF(ABS(DDVRX).GT.DDLIMX) THEN
         IFLAG=1
         DDVRX=SIGN(DDLIMX,DDVRX)
      ENDIF
C*** State integration
      DVRXD=DDVRX
      EDX=DELVRCX-DVRX
      DDVRXD=WNACT*WNACT*EDX-2.*ZETACT*WNACT*DVRXD
C*** Set rate derivative to zero
      IF(IFLAG.EQ.1.AND.DDVRX*DDVRXD.GT.0.) DDVRXD=0.
      DELVRX=DVRX
C
C*** Left elevon dynamics ***
C
C*** Fin position limiter
      IF(ABS(DVLX).GT.DLIMX) THEN
         DVLX=SIGN(DLIMX,DVLX)
         IF(DVLX*DDVLX.GT.0.) DDVLX=0.
      ENDIF
C*** Fin rate limiter
      IFLAG=0
      IF(ABS(DDVLX).GT.DDLIMX) THEN
         IFLAG=1
         DDVLX=SIGN(DDLIMX,DDVLX)
      ENDIF
C*** State integration
      DVLXD=DDVLX
      EDX=DELVLCX-DVLX
      DDVLXD=WNACT*WNACT*EDX-2.*ZETACT*WNACT*DVLXD
C*** Set rate derivative to zero
      IF(IFLAG.EQ.1.AND.DDVLX*DDVLXD.GT.0.) DDVLXD=0.
      DELVLX=DVLX
C
C*** Rudder dynamics ***
C
C*** Fin position limiter
      IF(ABS(DRX).GT.DLIMX) THEN
         DRX=SIGN(DLIMX,DRX)
         IF(DRX*DDRX.GT.0.) DDRX=0.
      ENDIF
C*** Fin rate limiter
      IFLAG=0
      IF(ABS(DDRX).GT.DDLIMX) THEN
         IFLAG=1
         DDRX=SIGN(DDLIMX,DDRX)
      ENDIF
C*** State integration
      DRXD=DDRX
      EDX=DELRCX-DRX
      DDRXD=WNACT*WNACT*EDX-2.*ZETACT*WNACT*DRXD
C*** Set rate derivative to zero
      IF(IFLAG.EQ.1.AND.DDRX*DDRXD.GT.0.) DDRXD=0.
      DELRX=DRX
C
      RETURN
      END
C***********************************************************************
      SUBROUTINE S4I
C***********************************************************************
C*** * Initialization of INS
C*** * Reserved C(3510) locations are 700-799
C*** *
C*** * This module performs the following functions:
C*** * (1) Initializes state variables
C*** * (2) Computed position and velocity initializations
C*** *
C*** * MODIFICATION HISTORY:
C*** * 990720 Created by Peter H Zipfel
C*** *
C***********************************************************************
C
      COMMON C(3510)
C
      DIMENSION IPL(100),IPLV(100),SBJI(3),SJII(3),VBIIC(3),SBJIC(3)
     +,SBII(3),SBIIC(3),VBII(3),PP0(9,9),APP0(9,9),GAUSS(9)
     +,XX0(9),DUM9(9),RICI(3),EVBI(3),ESBJ(3)
 
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0700),MINS)
      EQUIVALENCE (C(0772),FRAXINS)
C
C MINS = D INS mode. =0:ideal INS; =1:with INS errors
C FRAXINS = D Fractn to modify init INS err state: XXO=XXO(1+FRAXINS)
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(2561),NIP)
      EQUIVALENCE (C(2562),IPL(1))
      EQUIVALENCE (C(2867),IPLV(1))
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(1613),VBII(1))
      EQUIVALENCE (C(1619),SBII(1))
C
C VBII= S Vehicle velocity in inertial axes - m/s
C SBII= S Vehicle pos. wrt point I in inertial axes - m
C
C*** INITIALIZATIONS
C
      EQUIVALENCE (C(0701),ISETS4)
      EQUIVALENCE (C(0703),VBIIC(1))
      EQUIVALENCE (C(0731),SBIIC(1))
      EQUIVALENCE (C(0740),RICI(1))
      EQUIVALENCE (C(0746),EVBI(1))
      EQUIVALENCE (C(0752),ESBJ(1))
      EQUIVALENCE (C(0776),SBJIC(1))
C
C*** Initial covariance matrix based on GPS supported
C    transfer alignment. Units: m, m/s, mrad
C
      DATA ((PP0(I,N),N=1,9),I=1,9)/
 
     & 20.701,     0.12317,    0.10541,
     & 6.3213E-02, 2.2055E-03, 1.7234E-03,
     & 1.0633E-03, 3.4941E-02,-3.5179E-02,
 
     & 0.12317,    20.696,    -0.27174,
     & 4.8366E-03, 5.9463E-02,-1.3367E-03,
     &-3.4903E-02, 2.6112E-03,-4.2663E-02,
 
     & 0.10541,   -0.27174,    114.12,
     & 5.6373E-04,-8.3147E-03, 5.4059E-02,
     & 1.5496E-02, 7.6463E-02,-3.5302E-03,
 
     & 6.3213E-02, 4.8366E-03, 5.6373E-04,
     & 1.9106E-03, 8.0945E-05, 1.9810E-06,
     & 2.5755E-04, 2.8346E-03,-5.6482E-04,
 
     & 2.2055E-03, 5.9463E-02,-8.3147E-03,
     & 8.0945E-05, 1.7201E-03,-1.5760E-05,
     &-2.8341E-03, 2.6478E-04,-1.0781E-03,
 
     & 1.7234E-03,-1.3367E-03, 5.4059E-02,
     & 1.9810E-06,-1.5760E-05, 3.0070E-03,
     & 4.1963E-04,-1.3297E-04, 4.1190E-05,
 
     & 1.0638E-03,-3.4903E-02, 1.5496E-02,
     & 2.5755E-04,-2.8341E-03, 4.1963E-04,
     & 5.4490E-02,-1.8695E-03, 8.9868E-04,
 
     & 3.4941E-02, 2.6112E-03, 7.6463E-02,
     & 2.8346E-03, 2.6478E-04,-1.3297E-04,
     &-1.8695E-03, 5.2819E-02, 1.0990E-02,
 
     &-3.5179E-02,-4.2663E-02,-3.5302E-03,
     &-5.6482E-04,-1.0781E-03, 4.1190E-05,
     & 8.9868E-04, 1.0990E-02, 0.1291/
C
C*** INITIALIZE STATE VARIABLES
C
       LOCATION=737
       DO I=NIP,NIP+2
          IPL(I)=LOCATION
          IPLV(I)=LOCATION+3
          LOCATION=LOCATION+1
       ENDDO
       NIP=NIP+3
C
       LOCATION=743
       DO I=NIP,NIP+2
          IPL(I)=LOCATION
          IPLV(I)=LOCATION+3
          LOCATION=LOCATION+1
       ENDDO
       NIP=NIP+3
C
       LOCATION=749
       DO I=NIP,NIP+2
          IPL(I)=LOCATION
          IPLV(I)=LOCATION+3
          LOCATION=LOCATION+1
       ENDDO
       NIP=NIP+3
C
C*** INITIALIZE FLAG
C
      ISETS4=0
C
      IF(MINS.EQ.0) THEN
C
C***     OUTPUT WITHOUT INS ERRORS
C
         CALL MATEQL(SBIIC,SBII,3,1)
         CALL MATSUB(SBJI,SBII,SJII,3,1)
         CALL MATEQL(SBJIC,SBJI,3,1)
         CALL MATEQL(VBIIC,VBII,3,1)
C
      ELSE
C
C***     ERROR VARIABLE INITIALIZATION
C
         CALL MATCHO(APP0,PP0,9)
C
         DO I=1,100
            DISCARD=FNGAUS(0.,1.)
         ENDDO
         DO I=1,9
            GAUSS(I)=FNGAUS(0.,1.)
         ENDDO
C
         CALL MATMUL(DUM9,APP0,GAUSS,9,9,1)
         CALL MATCON(XX0,(1.+FRAXINS),DUM9,9,1)
         ESBJ(1)=XX0(1)
         ESBJ(2)=XX0(2)
         ESBJ(3)=XX0(3)
         EVBI(1)=XX0(4)
         EVBI(2)=XX0(5)
         EVBI(3)=XX0(6)
         RICI(1)=XX0(7)*.001
         RICI(2)=XX0(8)*.001
         RICI(3)=XX0(9)*.001
C
C***     VELOCITY INITIALIZATION
C
         CALL MATADD(VBIIC,EVBI,VBII,3,1)
C
C***     POSITION INITIALIZATION
C
         CALL MATSUB(SBJI,SBII,SJII,3,1)
         CALL MATADD(SBJIC,ESBJ,SBJI,3,1)
         CALL MATADD(SBIIC,SBJIC,SJII,3,1)
      ENDIF
C
      RETURN
      END
C***********************************************************************
      SUBROUTINE S4
C***********************************************************************
C*** * InertiaL Navigation System
C*** * Reserved C(3510) locations are 700-799
C*** *
C*** * This module performs the following functions:
C*** * (1) Models sensor errors (accelerometers and gyros)
C*** * (2) Models gravitational errors
C*** * (3) Calculates space stabilized INS errors
C*** *
C*** * MODIFICATION HISTORY:
C*** * 990720 Created by Peter H Zipfel
C*** *
C***********************************************************************
C
      COMMON C(3510)
C
      DIMENSION FSPIC(3),FSPCB(3),FSPB(3),TIB(3,3),EWBII(3),EWBIB(3)
     +,URIC(3),USJC(3),UVIC(3),ERI(3),RICI(3),DUM33(3,3),TIIC(3,3)
     +,TICI(3,3),TBI(3,3),TBIC(3,3),TICB(3,3),SBII(3),VBICB(3)
     +,VBII(3),VBIIC(3),EF(3),SJII(3),SBJI(3),SBJIC(3),EGRAVI(3)
     +,DUM3(3),WBIB(3),WBICB(3),EFSPB(3),EFSPIC(3),VBECB(3),ESBJD(3)
     +,VBEB(3),VBEIC(3),SBIIC(3),EVBI(3),ESBJ(3),RICID(3),EVBID(3)
     +,TGIC(3,3),WEII(3,3),VBEGC(3),VBEG(3),TIGC(3,3),TBGC(3,3)
     +,WBEB(3),WBECB(3),WEIB(3),RICISK(3,3),TGI(3,3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0700),MINS)
      EQUIVALENCE (C(0709),SJII(1))
C
C MINS = D =0:Perfect INS; =1:INS errors
C SJII(3) = D Ref point J for INS wrtr center of earth - m
C
C*** INPUT FROM EXECUTIVE
C
      EQUIVALENCE (C(0052),CRAD)
      EQUIVALENCE (C(0058),WEII3)
      EQUIVALENCE (C(2000),T)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(0320),TBI(1,1))
      EQUIVALENCE (C(0340),ALPPX)
      EQUIVALENCE (C(0341),PHIPX)
      EQUIVALENCE (C(0344),ALPHAX)
      EQUIVALENCE (C(0345),BETAX)
      EQUIVALENCE (C(0337),PSIBGX)
      EQUIVALENCE (C(0338),THTBGX)
      EQUIVALENCE (C(0339),PHIBGX)
      EQUIVALENCE (C(0360),VBEB(1))
      EQUIVALENCE (C(0500),MVNAV)
      EQUIVALENCE (C(0501),USJC(1))
      EQUIVALENCE (C(0504),UVIC(1))
      EQUIVALENCE (C(0507),URIC(1))
      EQUIVALENCE (C(1602),PSIVGX)
      EQUIVALENCE (C(1603),THTVGX)
      EQUIVALENCE (C(1604),DVBE)
      EQUIVALENCE (C(1619),SBII(1))
      EQUIVALENCE (C(1613),VBII(1))
      EQUIVALENCE (C(1631),TGI(1,1))
      EQUIVALENCE (C(1646),FSPB(1))
      EQUIVALENCE (C(1649),VBEG(1))
      EQUIVALENCE (C(1669),BALT)
      EQUIVALENCE (C(1670),DVBI)
      EQUIVALENCE (C(1707),WBIB(1))
      EQUIVALENCE (C(1713),WBEB(1))
      EQUIVALENCE (C(2866),ICOOR)
C
C TBI= S Transf matrix of body wrt inertial axes - ND
C ALPPX= O Total angle of attack - deg
C PHIPX= O Aerodynamic roll angle - deg
C ALPHAX= G Angle of attack - deg
C BETAX= G Side slip angle - deg
C PSIBGX= I/G Yawing angle of vehicle - deg
C THTBGX= I/G Pitching angle of vehicle - deg
C PHIBGX= I/G Rolling angle of vehicle - deg
C VBEB= O Geographic vehicle velocity in body coord - m/s
C PSIVGX= D/G Heading angle from north - deg
C THTVGX= D/G Flight path angle from horizontal - deg
C DVBE= D/G Geographic speed - m/s
C SBII= S Vehicle pos. wrt point I in inertial axes - m
C VBII= S Vehicle velocity in inertial axes - m/s
C TGI= I TM	of geographic wrt inertial coordinates - ND	
C FSPB= O Specific force in body axes - m/s^2
C VBEG= O Vehicle's velocity wrt earth in geographic axes - m/s
C BALT= D/G Vehicle altitude = m
C DVBI= O Inertial speed of vehicle - m/s
C WBIB= S Angular velocity of vehicle wrt inertial frame - rad/
C WBEB= I/G Geographic body rates - rad/s
C ICOOR= E Intgration cycle index (=0:predictor,=1:corrector)
C
C*** INITIALIZATION
C
      EQUIVALENCE (C(0701),ISETS4)
C
C ISETS4 = D Update Flag
C
C*** OUTPUT TO OTHER MODULES
C
      EQUIVALENCE (C(0702),DVBEC)
      EQUIVALENCE (C(0703),VBIIC(1))
      EQUIVALENCE (C(0706),WBICB(1))
      EQUIVALENCE (C(0712),VBECB(1))
      EQUIVALENCE (C(0715),TBIC(1,1))
      EQUIVALENCE (C(0727),VBICB(1))
      EQUIVALENCE (C(0730),DVBIC)
      EQUIVALENCE (C(0731),SBIIC(1))
      EQUIVALENCE (C(0734),FSPCB(1))
      EQUIVALENCE (C(0755),BALTCD)
	EQUIVALENCE (C(0756),BALTC)
	EQUIVALENCE (C(0757),PHIBGCX)
	EQUIVALENCE (C(0758),THTBGCX)
	EQUIVALENCE (C(0759),PSIBGCX)
      EQUIVALENCE (C(0760),VBEGC(1))
	EQUIVALENCE (C(0763),WBECB(1))
	EQUIVALENCE (C(0766),ALPHACX)
	EQUIVALENCE (C(0767),BETACX)
	EQUIVALENCE (C(0768),ALPPCX)
	EQUIVALENCE (C(0769),PHIPCX)
      EQUIVALENCE (C(0776),SBJIC(1))
	EQUIVALENCE (C(0770),PSIVGCX)
      EQUIVALENCE (C(0771),THTVGCX)
C
C DVBEC = O Computed geographic vehicle speed - m/s
C VBIIC(3) = O Computed inertial vehicle vel - m/s
C WBICB(3) = O Output of strap-doen gyros - rad/s
C VBECB(3) = O Computed geographic vehicle vel - m/s
C TBIC(3,3) = O Computed TM of body wrt inertial coor ND
C VBICB(3) = O Computed inertial vel in body exes - m/s
C DVBIC = O Computed inertial speed - m/s
C SBIIC(3) = O INS computed vehicle inertial pos - m
C FSPCB(3) = O Output of strap-down accelerometers - m/s^2
C BALTCD = O Altitude rate, computed - m/s
C BALTC = O Altitude, computed - m
C PHIBGCX = O Roll angle, computed - deg
C THTBGCX = O Pitch angle, computed - deg
C PSIBGCX = O Yaw angle, computed - deg
C VBEGC(3) = O Geographic velocity, computed - m/s
C WBECB(3) = O Body rates wrt earth, computed - rad/s
C ALPHACX = O Angle of attack, computed - deg
C BETACX = O Siedeslip angle, computed - deg
C ALPPCX = O Total angle of attack, computed - deg
C PHIPCX = O Aerodynamic roll angle, computed - deg
C SBJIC(3) = O Computed veh pos wrt ref point J - m
C PSIVGCX = O Heading angle, computed - deg
C THTVGCX = O Flight path angle, computed - deg
C
C*** STATE VARIABLES
C
      EQUIVALENCE (C(0737),RICID(1))
      EQUIVALENCE (C(0740),RICI(1))
      EQUIVALENCE (C(0743),EVBID(1))
      EQUIVALENCE (C(0746),EVBI(1))
      EQUIVALENCE (C(0749),ESBJD(1))
      EQUIVALENCE (C(0752),ESBJ(1))
C
C RICI(3) = S INS tilt errors - rad
C EVBI(3) = S INS velocity errors - m/s
C ESBJ(3) = S INS position errors - m
C
C*** DIAGNOSTICS
C
      EQUIVALENCE (C(0724),EWBIB(1))
      EQUIVALENCE (C(0773),EFSPB(1))
C
C EWBIB(3) = G Measur error of the x,y,z gyros - rad/s
C EFSPB(3) = G Measur error of the x,y,z, accel - m/s^2
C
      IF(MINS.EQ.0) THEN
C
C***     OUTPUT WITHOUT INS ERRORS
C
         CALL MATEQL(TBIC,TBI,3,3)
         CALL MATEQL(FSPCB,FSPB,3,1)
         CALL MATEQL(WBICB,WBIB,3,1)
         CALL MATEQL(SBIIC,SBII,3,1)
         CALL MATSUB(SBJI,SBII,SJII,3,1)
         CALL MATEQL(SBJIC,SBJI,3,1)
         CALL MATEQL(VBIIC,VBII,3,1)
         CALL MATEQL(VBECB,VBEB,3,1)
         CALL MATEQL(VBEGC,VBEG,3,1)
         CALL MATEQL(WBECB,WBEB,3,1)
         DVBIC=DVBI
         DVBEC=DVBE
	   BALTCD=-VBEG(3)
	   BALTC=BALT
	   PHIBGCX=PHIBGX
	   THTBGCX=THTBGX
	   PSIBGCX=PSIBGX
C
	   ALPHACX=ALPHAX
         BETACX=BETAX
         ALPPCX=ALPPX
         PHIPCX=PHIPX
C
	   PSIVGCX=PSIVGX
	   THTVGCX=THTVGX
C
      ELSE
C
C***     OUTPUT WITH INS ERRORS
C
C***     ATTITUDE ERROR EQUATIONS
C
         CALL S4GYRO(EWBIB,WBICB)
	   CALL MATTRA(TIB,TBI,3,3)
         CALL MATMUL(EWBII,TIB,EWBIB,3,3,1)
	   CALL MATEQL(RICID,EWBII,3,1)
C
C***     TRANSFORMATION MATRICES
C
         CALL MATSKS(RICISK,RICI)
         CALL MATUNI(DUM33,3)
         CALL MATSUB(TIIC,DUM33,RICISK,3,3)
         CALL MATTRA(TICI,TIIC,3,3)
         CALL MATMUL(TBIC,TBI,TIIC,3,3,3)
C
C***     Velocity and position error equations
C
         CALL S4ACCL(FSPCB,EFSPB)
         CALL MATTRA(TICB,TBIC,3,3)
         CALL MATMUL(FSPIC,TICB,FSPCB,3,3,1)
         CALL MATMUL(DUM3,RICISK,FSPIC,3,3,1)
         CALL MATMUL(EFSPIC,TICB,EFSPB,3,3,1)
         CALL MATSUB(EF,EFSPIC,DUM3,3,1)
C
         CALL S4GRAV(EGRAVI,ESBJ,SBIIC)
	   CALL MATADD(EVBID,EF,EGRAVI,3,1)
	   CALL MATEQL(ESBJD,EVBI,3,1)
C
C***     INS update at corrector integration cycle
C
         IF(MVNAV.EQ.3) ISETS4=1
         IF(ICOOR.EQ.1.AND.ISETS4.EQ.1.) THEN
C
            ISETS4=0
            MVNAV=0
C
	      CALL MATADD(RICI,RICI,URIC,3,1)
	      CALL MATADD(ESBJ,ESBJ,USJC,3,1)
	      CALL MATADD(EVBI,EVBI,UVIC,3,1)
C
C***        Set derivatives to zero
C
	      DO I=737,739
	         C(I)=0.
	         C(I+6)=0.
	         C(I+12)=0.
	      ENDDO
C
C*** Set updates to zero
C
            DO 3 I=1,3
            USJC(I)=0.
            UVIC(I)=0.
 3          URIC(3)=0.
C
         ENDIF
C
C***     INS inertial position and velocity vectors
C
         CALL MATSUB(SBJI,SBII,SJII,3,1)
	   CALL MATADD(SBJIC,ESBJ,SBJI,3,1)
         CALL MATADD(SBIIC,SBJIC,SJII,3,1)
C
	   CALL MATADD(VBIIC,EVBI,VBII,3,1)
C
C***     Computed geographic velocity in body axes
C
         CALL MATMUL(VBICB,TBIC,VBIIC,3,3,1)
         CALL MATABS(DVBIC,VBICB,3)
         DUM3(1)=-WEII3*SBIIC(2)
         DUM3(2)=WEII3*SBIIC(1)
         DUM3(3)=0.
         CALL MATSUB(VBEIC,VBIIC,DUM3,3,1)
         CALL MATMUL(VBECB,TBIC,VBEIC,3,3,1)
         CALL MATABS(DVBEC,VBECB,3)
C
C*** Computed incidence angles
C
         ALPHAC=ATAN2(VBECB(3),VBECB(1))
         BETAC=ASIN(VBECB(2)/DVBEC)
         DUM=VBECB(1)/DVBEC
         IF(ABS(DUM).GE.1.) DUM=SIGN(1.,DUM)
         ALPPC=ACOS(DUM)
         IF(VBECB(2).EQ.0..AND.VBECB(3).EQ.0.)THEN
            PHIPC=0.
         ELSE
            PHIPC=ATAN2(VBECB(2),VBECB(3))
         ENDIF
C
         ALPHACX=ALPHAC*CRAD
         BETACX=BETAC*CRAD
         ALPPCX=ALPPC*CRAD
         PHIPCX=PHIPC*CRAD
C
C***     Computed geographic velocity in geodetic coordinates
C        and flight path angles and long, lat, alt
C
	   CALL MATMUL(TGIC,TGI,TIIC,3,3,3)
         CALL MATZER(WEII,3,3)
         WEII(1,2)=-WEII3
         WEII(2,1)=WEII3
         CALL MATMUL(DUM3,WEII,SBIIC,3,3,1)
	   CALL MATSUB(VBEIC,VBIIC,DUM3,3,1)
	   CALL MATMUL(VBEGC,TGIC,VBEIC,3,3,1)
         CALL MATPOL(DUM,PSIVGC,THTVGC,VBEGC)
         PSIVGCX=PSIVGC*CRAD
         THTVGCX=THTVGC*CRAD
C
         CALL CADGEO84(BLONC,BLATC,BALTC,SBIIC,ALON0) !? WARNING: may not conver
C
C
C***     altitude rate for autopilot. Approximate values since in geographic
C        and not in geodetic coordinates. Autopilot consequences are nill
C
	   BALTCD=-VBEGC(3)
C
C***     Computed Euler angles
C
	   CALL MATTRA(TIGC,TGIC,3,3)
         CALL MATMUL(TBGC,TBIC,TIGC,3,3,3)
	   IF(ABS(TBGC(1,3)).LT.1.) THTBGC=ASIN(-TBGC(1,3))
         CTHTBGC=COS(THTBGC)
         DUM1=TBGC(1,1)/CTHTBGC
         DUM2=TBGC(3,3)/CTHTBGC
         IF(ABS(DUM1).LE.1.) PSIBGC=ACOS(DUM1)*SIGN(1.,TBGC(1,2))
         IF(ABS(DUM2).LE.1.) PHIBGC=ACOS(DUM2)*SIGN(1.,TBGC(2,3))
C
         PSIBGCX=CRAD*PSIBGC
         THTBGCX=CRAD*THTBGC
         PHIBGCX=CRAD*PHIBGC
C
C***     Computed body rates wrt earth
C
	   CALL VECVEC(DUM3,0.,0.,WEII3)
	   CALL MATMUL(WEIB,TBIC,DUM3,3,3,1)
	   CALL MATSUB(WBECB,WBICB,WEIB,3,1)
C
      ENDIF
C
      RETURN
      END
C***********************************************************************
      SUBROUTINE S4GYRO(EWBIB,WBICB)
C***********************************************************************
C*** * Strapdown Gyros
C*** *
C*** * Argument Output:
C*** *          EWBIB(3) =Gyro errors in body coor - rad/s
C*** *          WBICB(3) =Output of strap-doen gyros in body coor- rad/s
C*** *
C*** * MODIFICATION HISTORY:
C*** * 850429 Created by Peter H Zipfel
C*** *
C***********************************************************************
C
      COMMON C(3510)
C
      DIMENSION EWBIB(3),EUNBG(3),EMISG(3),ESCALG(3),EBIASG(3)
     +,WBIB(3),FSPB(3),WBICB(3),EUG(3),EMISCG(3),EGB(3,3)
     +,EMSBG(3)
C
C*** INPUT DATA
C
      EQUIVALENCE (C(0788),EUNBG(1))
      EQUIVALENCE (C(0791),EMISG(1))
      EQUIVALENCE (C(0794),ESCALG(1))
      EQUIVALENCE (C(0797),EBIASG(1))
C
C EUNBG(3) = D Gyro g-sensitivity- (rad/s)/(m/s^2)
C EMISG(3) = D Gyro cluster misalignment - rad
C ESCALG(3) = D Gyro scale factor error - parts
C EBIASG(3) = D Gyro bias - rad/s
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(1646),FSPB(1))
      EQUIVALENCE (C(1707),WBIB(1))
C
C FSPB= O Specific force in body axes - m/s^2
C WBIB= S Angular velocity of vehicle wrt inertial frame - rad/
C
C*** GYRO CLUSTER MISALIGNMENT AND SCALE FACTOR ERRORS
C
      CALL MATSKS(EGB,EMISG)
      EGB(1,1)=ESCALG(1)
      EGB(2,2)=ESCALG(2)
      EGB(3,3)=ESCALG(3)
      CALL MATMUL(EMISCG,EGB,WBIB,3,3,1)
      CALL MATADD(EMSBG,EBIASG,EMISCG,3,1)
C
C*** GYRO SPIN AXIS ACCELERATION SENSITIVITY (MASS UNBALANCE)
C
      EUG(1)=EUNBG(1)*FSPB(1)
      EUG(2)=EUNBG(2)*FSPB(2)
      EUG(3)=EUNBG(3)*FSPB(3)
C
C*** TOTAL GYRO OUTPUT UNCERTAINTIES
C
      CALL MATADD(EWBIB,EMSBG,EUG,3,1)
C
C*** GYRO MEASURED BODY RATES
C
      CALL MATADD(WBICB,WBIB,EWBIB,3,1)
C
      RETURN
      END
C***********************************************************************
      SUBROUTINE S4ACCL(FSPCB,EFSPB)
C***********************************************************************
C*** * Strapdown Accelerometers
C*** *
C*** * Argument Output:
C*** *          FSPCB(3) =Output of accel in body axes - m/s^2
C*** *          EFSPB(3) =Accel errors in body axes - m/s^2
C*** *
C*** * MODIFICATION HISTORY:
C*** * 850429 Created by Peter H Zipfel
C*** *
C***********************************************************************
C
      COMMON C(3510)
C
      DIMENSION EMISA(3),ESCALA(3),EBIASA(3),FSPB(3),EFSPB(3)
     +,EAB(3,3),DUM3(3),FSPCB(3)
C
C*** INNPUT DATA
C
      EQUIVALENCE (C(0779),EMISA(1))
      EQUIVALENCE (C(0782),ESCALA(1))
      EQUIVALENCE (C(0785),EBIASA(1))
C
C EMISA(3) = D Accel cluster misalignment - rad
C ESCALA(3) = D Accel scale factor error - parts
C EBIASA(3) = D Accel bias - rad/s
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(1646),FSPB(1))
C
C FSPB= O Specific force in body axes - m/s^2
C
      CALL MATSKS(EAB,EMISA)
      EAB(1,1)=ESCALA(1)
      EAB(2,2)=ESCALA(2)
      EAB(3,3)=ESCALA(3)
      CALL MATMUL(DUM3,EAB,FSPB,3,3,1)
      CALL MATADD(EFSPB,EBIASA,DUM3,3,1)
      CALL MATADD(FSPCB,EFSPB,FSPB,3,1)
C
      RETURN
      END
C***********************************************************************
      SUBROUTINE S4GRAV(EGRAVI,ESBJ,SBIIC)
C***********************************************************************
C*** * Gravitational Error
C*** *
C*** * Argument Output:
C*** *          EGRAVI(3) =Gravitational error output - m/s^2
C*** *
C*** * Argument Input:
C*** *          ESBJ(3)= Vehicle position error  - m
C*** *          SBIIC(3)= Vehicle position wrt center of earth - m
C*** *
C*** * MODIFICATION HISTORY:
C*** * 850429 Created by Peter H Zipfel
C*** *
C***********************************************************************
C
      COMMON C(3510)
C
      DIMENSION EGRAVI(3),SBIIC(3),EGV(3),EGS(3),ESBJ(3)
C
C*** INPUT FROM OTHER MODULES
C
      EQUIVALENCE (C(1671),DBI)
C
C DBI= O Distance of vehicle from center of earth - m
C
C*** WGS 84 Paramter
C
	PARAMETER(GM = 3.986005E+14)
C
      CALL MATABS(DBIC,SBIIC,3)
      ED=DBIC-DBI
      DUM=GM/DBIC**3
	CALL MATCON(EGV,DUM,ESBJ,3,1)
      DUM1=DUM*3.*ED/DBIC
      CALL MATCON(EGS,DUM1,SBIIC,3,1)
      CALL MATSUB(EGRAVI,EGS,EGV,3,1)
C
      RETURN
      END
C************************** DUMMY RETURNS ******************************
	SUBROUTINE A3I
	RETURN
	END
	SUBROUTINE A4I
	RETURN
	END
	SUBROUTINE A4
	RETURN
	END
	SUBROUTINE A5I
	RETURN
	END
	SUBROUTINE A5
	RETURN
	END
C
	SUBROUTINE C1I
	RETURN
	END
	SUBROUTINE C1
	RETURN
	END
	SUBROUTINE C3I
	RETURN
	END
	SUBROUTINE C3
	RETURN
	END
	SUBROUTINE C5I
	RETURN
	END
	SUBROUTINE C5
	RETURN
	END
C
	SUBROUTINE D3I
	RETURN
	END
	SUBROUTINE D3
	RETURN
	END
	SUBROUTINE D4
	RETURN
	END
	SUBROUTINE D4I
	RETURN
	END
	SUBROUTINE D5I
	RETURN
	END
	SUBROUTINE D5
	RETURN
	END
C
	SUBROUTINE G1I
	RETURN
	END
	SUBROUTINE G1
	RETURN
	END
	SUBROUTINE G4I
	RETURN
	END
	SUBROUTINE G4
	RETURN
	END
	SUBROUTINE G5I
	RETURN
	END
	SUBROUTINE G5
	RETURN
	END
C
	SUBROUTINE S1I
	RETURN
	END
	SUBROUTINE S1
	RETURN
	END
	SUBROUTINE S2I
	RETURN
	END
	SUBROUTINE S2
	RETURN
	END
	SUBROUTINE S3I
	RETURN
	END
	SUBROUTINE S3
	RETURN
	END
	SUBROUTINE S5I
	RETURN
	END
	SUBROUTINE S5
	RETURN
	END
 

