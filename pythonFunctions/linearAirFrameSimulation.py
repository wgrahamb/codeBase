import numpy as np
from numpy import array as npa
from numpy import linalg as la
import pandas as pd
import matplotlib.pyplot as plt
import utility.loggingFxns as lf

# INPUTS
ALT = 10000 # FEET
SPD = 1005 # FEET PER SEC
DEFL_D = 5 # DEGREES
DEFL = np.radians(DEFL_D) # RADIANS

# AIRFRAME
REF_DIAM = 1 # FEET
NOSE_LNGTH = 3 # FEET
REF_LNGTH = 20 # FEET
WNG_HLF_SPN = 2 # FEET
WNG_TIP_CHRD = 0 # FEET
WNG_ROOT_CHRD = 6 # FEET
TAIL_HLF_SPN = 2 # FEET
TAIL_TIP_CHRD = 0 # FEET
TAIL_ROOT_CHRD = 2 # FEET
BASE_OF_NOSE_TO_WNG = 4 # FEET
XCG = 10 # FEET, FROM NOSE.
XCD = 19.5 # FEET, FROM NOSE.

# CALCULATIONS OF CONSTANTS FOR LOOP ONE AND TWO
WNG_AREA = 0.5 * WNG_HLF_SPN * (WNG_TIP_CHRD + WNG_ROOT_CHRD)
TAIL_AREA = 0.5 * TAIL_HLF_SPN * (TAIL_TIP_CHRD + TAIL_ROOT_CHRD)
REF_AREA = np.pi * (REF_DIAM ** 2) / 4
NOSE_AREA = NOSE_LNGTH * REF_DIAM
PLANFORM_AREA = (REF_LNGTH - NOSE_LNGTH) * REF_DIAM + 0.667 * NOSE_LNGTH * REF_DIAM
XCP_NOSE = 0.67 * NOSE_LNGTH
XCP_WNG = NOSE_LNGTH + BASE_OF_NOSE_TO_WNG + 0.7 * WNG_ROOT_CHRD - 0.2 * WNG_TIP_CHRD
AN = 0.67 * NOSE_LNGTH * REF_DIAM
AB = (REF_LNGTH - NOSE_LNGTH) * REF_DIAM
XCP_BODY = (0.67 * AN * NOSE_LNGTH + AB * (NOSE_LNGTH + 0.5 * (REF_LNGTH - NOSE_LNGTH))) / (AN + AB)

# ATMOSPHERE.
RHO = None
if ALT <= 30000:
	RHO = 0.002378 * np.exp(-ALT / 30000)
else:
	RHO = 0.0034 * np.exp(-ALT / 22000)
Q = 0.5 * RHO * SPD * SPD
A = 1000 # FEET PER SECOND >>> ASSUMED CONSTANT
G = 32.2 # FEET PER S^2 >>> ASSUMED CONSTANT
MACH = SPD / A
BETA = np.sqrt(MACH ** 2 - 1)

# MASS AND MOTOR. (NO MOTOR FOR NOW.)
MASS = 1000 # LBM
TMOI = (MASS * (3 * ((0.5 * REF_DIAM) ** 2) + REF_LNGTH ** 2)) / (12 * G)

# DERIVATIVES.
ALPHADOT = 0.0
RATEDOT = 0.0
WDOT = 0.0

# STATE.
ALT = ALT
SPD = SPD
THETA = 0.0
RATE = 0.0
ALPHA = 0.0

# SIM CONTROL.
TOF = 0.0
DT = 0.001
MAXT = 1

def populateState():
	STATE = {
		"TOF": TOF,
		"THETA": THETA,
		"RATE": RATE,
		"ALPHA": ALPHA,
		"ALPHADOT": ALPHADOT,
		"RATEDOT": RATEDOT,
		"WDOT": WDOT
	}
	return STATE

STATE = populateState()
LOGFILE = open("PY_6DOF_70MM_ROCKET\data\log.txt", "w")
lf.writeHeader(STATE, LOGFILE)
lf.writeData(STATE, LOGFILE)

while TOF <= MAXT:

	# NORMAL COEFFICIENT AND PITCHING MOMENT COEFFICIENT CALCULATION
	CN = 2 * ALPHA + (1.5 * PLANFORM_AREA * ALPHA * ALPHA) / REF_AREA + (8 * WNG_AREA * ALPHA) / (BETA * REF_AREA) + (8 * TAIL_AREA * (ALPHA + DEFL)) / (BETA * REF_AREA)
	CM = 2 * ALPHA * ((XCG - XCP_NOSE) / REF_DIAM) + ((1.5 * PLANFORM_AREA * ALPHA * ALPHA) / REF_AREA) * ((XCG - XCP_BODY) / REF_DIAM) + ((8 * WNG_AREA * ALPHA) / (BETA * REF_AREA)) * ((XCG - XCP_WNG) / REF_DIAM) + ((8 * TAIL_AREA * (ALPHA + DEFL)) / (BETA * REF_AREA)) * ((XCG - XCD) / REF_DIAM)

	# DERIVATIVES. CHECK UNITS.
	ALPHADOT = RATE - ((WDOT * G) / SPD)
	RATEDOT = (Q * REF_AREA * REF_DIAM * CM) / TMOI
	WDOT = ((Q * REF_AREA * CN) * (G / MASS)) / G

	# STATE.
	TOF += DT
	THETA += RATE * DT
	RATE += RATEDOT * DT
	ALPHA += ALPHADOT * DT
	
	# STORE DATA AT CURRENT CONDITIONS
	STATE = populateState()
	lf.writeData(STATE, LOGFILE)
